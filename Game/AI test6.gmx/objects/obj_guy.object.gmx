<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>guyx1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>pathing</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>crnt_spd = 5;
max_diff = 16;
ground = instance_place(x,y,obj_terrain_parent);

debug = "";
sneakiness = 0;

xspd = 0;
yspd = 0;
zspd = 0;
base_z = 0;
rot_max = 5;
rot_r = 32;
should_pivot = false;

z_spd = 0;
spd = 5;
spdmod = 0;
w = 64;
h = 32;
z = 0; //set z coordinate to be on the ground initially.
zprevious = 0;
dir_move = 270;
dir_face = 270;
strafing = false;
pivoting = false;

jumping = false;
talking = false;
blinking = false;
channeling = false;
stunned = false;
snared = false;
sneaking = false;
invulnerable = false;

atk_rng = 64;
target_x = x+rot_r;
target_y = y+rot_r;
target_has_changed = false;

path = noone;
localpath = noone;
max_path_dist = 1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move(Off for debugging purposes)
/*
xspd = displacement on x axis
yspd = displacement on y axis
*/

pivoting = pivot_btn;
strafing = strafe_btn;
zprevious = z;

//check keyboard input to determine maximum displacement
if (arrow_left){
  xspd = -1*(crnt_spd + spdmod);
}
if (arrow_right){
  xspd = (crnt_spd + spdmod);
}
if (arrow_up){
  yspd = -1*(crnt_spd + spdmod);
}
if (arrow_down){
  yspd = (crnt_spd + spdmod);
}
//if sneaking = true, modify total speed to account for it
if (sneaking){
  xspd = floor(xspd*sneak_mod+1);
  yspd = floor(yspd*sneak_mod+1);
}

if(!arrow_left &amp;&amp; !arrow_right){
  xspd = 0;
}
if(!arrow_up &amp;&amp; !arrow_down){
  yspd = 0;
}

dir_move = speed_direction(xspd,yspd,dir_move);

if (!strafing &amp;&amp; !stunned){
  dir_face = dir_move;
}

//xspd = lengthdir_x(crnt_spd,dir_move);
//yspd = lengthdir_y(crnt_spd,dir_move);
//if conditions permit, move desired amount
if (!pivoting &amp;&amp; !snared &amp;&amp; !channeling &amp;&amp; !stunned &amp;&amp; controlling_player == crnt_pnum &amp;&amp; !instance_exists(obj_menu_parent)){
  if (point_pathable(x+xspd,y+yspd,ceil(w/cell_w)) || aerial_point_pathable(x+xspd,y+yspd)){
    x += xspd;
    y += yspd;
  }else{
    //move as far as possible in the desired direction
    move_contact_nonpathable(dir_move,crnt_spd,max_diff);
    //move_contact_all(dir_move,crnt_spd);
    if (!point_pathable(x+xspd,y,ceil(w/cell_w)) &amp;&amp; !aerial_point_pathable(x+xspd,y)){
      move_contact_nonpathable(270+sign(xspd)*90,xspd,max_diff);
      //move_contact_all(270+sign(xspd)*90,xspd);
      xspd = 0;
    }else{
      x += xspd;
    }
    if (!point_pathable(x,y+yspd,ceil(w/cell_w))&amp;&amp; !aerial_point_pathable(x,y+yspd)){
      move_contact_nonpathable(180+sign(yspd)*90,yspd,max_diff);
      //move_contact_all(270+sign(xspd)*90,xspd);
      yspd = 0;
    }else{
      y += yspd;
    }
  }
}

a = round((y+cell_h/2)/cell_h - (x+cell_w/2)/cell_w);
b = round((y+cell_h/2)/cell_h + (x+cell_w/2)/cell_w);
ground = instance_position((b - a)/2*cell_w,(b + a)/2*cell_h,obj_terrain_parent);
if (ground.sloped){
  base_z = get_slope_z(x,y,ground);
}else{
  base_z = ground.z;
}
if (!jumping){
  z = base_z;
}else{
  z += z_spd;
  if (base_z &gt; z){
    jumping = false;
    z = base_z;
    zspd = 0;
    if (!point_pathable(x,y,max_diff)){
      snap_to_pathable(max_diff);
    }
  }else{
    z_spd -= 1;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RTS style Movement
//rts_style_move();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite
crnt_dir = point_direction(xprevious,yprevious,x,y);
image_index = ((crnt_dir+22.5) div 45);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
/*
if(instance_number(region_generator) == 0){
  //instance_create(0,0,region_generator);
}
var xpos,ypos,result;
if(localpath != noone){
  spd_remaining = spd;
  if(!ds_list_empty(localpath.nodes_x)){
    xpos = l_get(localpath.nodes_x,0);
    ypos = l_get(localpath.nodes_y,0);
    result = bub_towards_point(xpos,ypos);
    if (result == 1){
      l_del(localpath.nodes_x,0);
      l_del(localpath.nodes_y,0);
      xpos = l_get(localpath.nodes_x,0);
      ypos = l_get(localpath.nodes_y,0);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//compute_path(mouse_x,mouse_y,26);
var obj;
/*
obj = instance_position(mouse_x,mouse_y,obj_terrain_parent);
target_x = obj.x;
target_y = obj.y;
path_main(target_x,target_y);
path_local_main(l_get(path.nodes_x,0),l_get(path.nodes_y,0));
*/
target_x = mouse_x;
target_y = mouse_y;
target_has_changed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xpos,ypos,node_x,node_y,node_a,node_b;
draw_self();

draw_sprite(green,0,x,y-base_z);
draw_sprite(red,0,x,y-z);

xpos = lengthdir_x(200,dir_face);
ypos = lengthdir_y(200,dir_face);
draw_set_color(c_black);
draw_line(x+w/2,y+h/2,x+w/2+xpos,y+h/2+ypos);

if (target_x != noone){
  //draw_path_local(target_x,target_y);
}
/*
if (target_x != noone){
  node_a = instance_position(x,y,obj_terrain_parent);
  node_b = instance_position(target_x,target_y,obj_terrain_parent);
  draw_node_path_pathability(node_a,node_b,ceil(w/cell_w));
  draw_line(node_a.x,node_a.y,node_b.x,node_b.y)
}
*/
//rasterize_line(x,y,mouse_x,mouse_y);
//draw_line_pathability(instance_position(x,y,obj_terrain_parent),instance_position(mouse_x,mouse_y,obj_terrain_parent),ceil(w/cell_w))
/*
if(debug != ""){
  draw_set_color(c_blue)
  draw_text(x,y,debug);
}
*/
/*
draw_grid(mouse_x,mouse_y);
*/
/*
quelf = get_iso_area(x,y,ceil(w/cell_w));
for(i=0;i&lt;ds_list_size(quelf);i+=1){
  obj = ds_list_find_value(quelf,i);
  draw_sprite(green,0,obj.x,obj.y);
}
ds_list_destroy(quelf);
*/
/*
draw_sprite(shadow,0,x,y-base_z/2);
draw_sprite(sprite_index,-1,x,y-z/2);
*/
/*
obj = instance_position(mouse_x,mouse_y,obj_terrain_parent)
draw_intersection_pathability(obj,ceil(3),max_diff)
*/
//draw path
if (path != noone){
  /*
  obj = ds_map_find_first(path.closed);
  for(i=0;i&lt;ds_map_size(path.closed);i+=1){
    draw_sprite(red,0,obj.x,obj.y);
    obj = ds_map_find_next(path.closed,obj);
  }
  obj = ds_map_find_first(path.open);
  for(i=0;i&lt;ds_map_size(path.open);i+=1){
    draw_sprite(green,0,obj.x,obj.y);
    obj = ds_map_find_next(path.open,obj);
  }
  */
    node_x = x;
    node_y = y;
  for(i=0;i&lt;ds_list_size(path.nodes_x);i+=1){
    prev_x = node_x;
    prev_y = node_y;
    node_x = ds_list_find_value(path.nodes_x,i);
    node_y = ds_list_find_value(path.nodes_y,i);
    draw_line(prev_x+cell_w/2,prev_y+cell_h/2,node_x+cell_w/2,node_y+cell_h/2);
    draw_sprite(marker,0,node_x,node_y);
  }
}
  
if (localpath != noone){
  node_x = x;
  node_y = y;
  for(i=0;i&lt;ds_list_size(localpath.nodes_x);i+=1){
    prev_x = node_x;
    prev_y = node_y;
    node_x = ds_list_find_value(localpath.nodes_x,i);
    node_y = ds_list_find_value(localpath.nodes_y,i);
    draw_line(prev_x+cell_w/2,prev_y+cell_h/2,node_x+cell_w/2,node_y+cell_h/2);
    draw_sprite(marker2,0,node_x,node_y);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump
if (!jumping){
  jumping = true;
  z_spd = 16;
  z += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
