<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set initial variables
if global.returning == false
{
///set variables
globalvar pname, cjp, pslot, ready;
yposition = 0
xposition = 0
cjp = 0
statuschanged = false
keyboard_string = ''

//declare player names
pname[0] = ''
pname[1] = ''
pname[2] = ''
pname[3] = ''
pname[4] = ''
pname[5] = ''
pname[6] = ''
pname[7] = ''

//declare player slots
pslot[0] = 1
pslot[1] = 2
pslot[2] = 3
pslot[3] = 4
pslot[4] = 5
pslot[5] = 6
pslot[6] = 7
pslot[7] = 8

/*
//declare player texts
ptext[0] = ''
ptext[1] = 0
ptext[2] = 0
ptext[3] = 0
ptext[4] = 0
ptext[5] = 0
ptext[6] = 0
ptext[7] = 0
ptext[8] = 0
*/

//declare readiness
ready[0] = false
ready[1] = false
ready[2] = false
ready[3] = false
ready[4] = false
ready[5] = false
ready[6] = false
ready[7] = false

//declare sprites
mu_spr[0] = 0
mu_spr[1] = 0
mu_spr[2] = 0
mu_spr[3] = 0
mu_spr[4] = 0
mu_spr[5] = 0
mu_spr[6] = 0
mu_spr[7] = 0

//declare icons
mu_icon[0] = 0
mu_icon[1] = 0
mu_icon[2] = 0
mu_icon[3] = 0
mu_icon[4] = 0
mu_icon[5] = 0
mu_icon[6] = 0
mu_icon[7] = 0
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables

width = 1;
height = 2;

btn_labels[0] = "Choose Character";
btn_labels[1] = "Disconnect";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Menu

for(i=0;i&lt;height;i+=1){
  lastcreated = instance_create(x+128,y+64+i*32,obj_btn);
  lastcreated.btn_column = 0;
  lastcreated.btn_row = i;
  btn_array[0,i] = lastcreated;
  lastcreated.text = btn_labels[i];
  lastcreated.btn_index = i;
  lastcreated.empty = false;
  lastcreated.border_sprite = spr_selection_96x32;
}

hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive messages from the master

while (true)
    {
    // Initalise local variables for storing the packet id and size
    var packet, size;
    size = 0;

    // Receive packets from the clients
    size = receivemessage(server);
    // Break the loop if no messages were received
    if size &lt;= 0
        {
        break;
        }
    else
        {
        // Otherwise read the message
        packet = readbyte();
        // Use the packet id to decide how to handle the message
        if packet == SLAVE_ID
            {
            cjp = readint()
            global.var_numberofplayers = readint()
            i = 0
            while i &lt; cjp
                {
                pnum[i] = readint();
                pname[i] = readstring();
                pslot[i] = readint();
                //ptext[i] = readstring();
                //playerarray[i] = pnum[i],pname[i], etc.
                i += 1;
                }
            crnt_pnum = cjp
            pslot[crnt_pnum] = (cjp + 1)
            //respond immediately
            clearbuffer()
            writebyte(SLAVE_ID)
            writebyte(crnt_pnum)
            writestring(pname[crnt_pnum])
            //writestring(keyboard_string)
            sendmessage(server)
            
            cjp += 1
            break;
            }
        // A connection has been closed with a client
        if packet == MASTER_DROP
            {
            // send player back to join_lobby
            show_message("Host has disconnected");
            closesocket(server);
            room_goto(room_multiplayermenu);
            break;
            }
        // A new client position has been updated
        if packet == MLOBBY_ID
            {
            cjp = readint()
            i = 0
            while i &lt; cjp
                {
                pnum[i] = readint()
                pslot[i] = readint()
                ready[i] = readbyte()
                pname[i] = readstring()
                mu_spr[i] = readbyte();
                mu_icon[i] = readbyte();
                mu_mhp[i] = readint();
                mu_hp[i] = mu_mhp[i];
                mu_mep[i] = readint();
                mu_ep[i] = mu_mep[i];
                //ptext[i] = readstring()
                i += 1
                }
            break;
            }
        if (packet == NEXT_ROOM){
          roomprevious = room;
          start_game();
          break;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input

if(confirm_btn){//press enter
  event_user(1);
  io_clear2();
}else{  //check arrowkeys
  var xpos, ypos;
  xpos = hovered.btn_column;
  ypos = hovered.btn_row;
  
  //move left
  if(arrow_left){
    if (xpos &gt; 0){
      xpos -= 1;
    }else{
      xpos = width-1;
    }
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = width-1;
        }
      }//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move right
  if(arrow_right){
    xpos = (xpos+1) mod width;
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i=(i+1)mod width){}//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move up
  if(arrow_up){
    if (xpos == width-1 || ypos &gt; 0){
     if (ypos &gt; 0){
        ypos -= 1;
      }else{
        ypos = height-1;
      }
      for(i=ypos;btn_array[xpos,i].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = height-1;
        }
      }//scroll up the column to find the next non-empty space
      ypos = i; 
    }else if(line_index &gt; 0){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll up the page
      line_index -= 1;
      scrollbtn_down.image_index = 0;
      if (line_index == 0){
        scrollbtn_up.image_index = 1;
      }
      event_user(2);
    }
    io_clear2();
  }
  
  //move down
  if(arrow_down){
    if (xpos == width-1 || ypos &lt; height-1){
     if (ypos &lt; height-1){
        ypos = (ypos+1)mod height;
        for(i=ypos;btn_array[xpos,i].empty;i=(i+1)mod height){}//scroll down the column to find the next non-empty space
        ypos = i; 
      }
    }else if(line_index &lt; ds_list_size(skill_list)-4){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll down the page
      line_index += 1;
      scrollbtn_up.image_index = 0;
      if (line_index == ds_list_size(skill_list)-4){
        scrollbtn_down.image_index = 1;
      }
      event_user(2);
    }
    io_clear2();
  }
  
  hovered = btn_array[xpos,ypos];
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select character or drop
switch(hovered.btn_index){
case 0:
  global.roomprevious = 'lobby'
  room_goto(room_charactermain)
  break;
case 1:
  clearbuffer();
  writebyte(SLAVE_DROP);
  writebyte(crnt_pnum)
  sendmessage(server);
  room_goto(room_multiplayermenu);
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send drop information to master

clearbuffer();
writebyte(SLAVE_DROP);
writebyte(crnt_pnum)
sendmessage(server);
dllfree()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff
draw_set_color(c_white);
draw_set_font(font0);

draw_self();

for(i=0;i&lt;8;i+=1){
  if (ready[i] &amp;&amp; i &lt;cjp){
    draw_sprite(spricon[mu_spr[i]],mu_icon[i],x+64,y+140+(48*i));
    draw_text(x+112,y+128+(48*i),pname[i]);
    draw_text(x+112,y+128+(48*i),pname[i]);
  }
draw_sprite(spr_border_48x48,0,x+112,y+128+(48*i));
}

draw_text(x+64,y+128+(48*9),myip);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
