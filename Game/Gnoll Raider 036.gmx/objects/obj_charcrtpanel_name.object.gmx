<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrtpanel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menupanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up Dependencies
//destroy helpers
with(textbox){
  instance_destroy();
}
with(hover_border){
  instance_destroy();
}
//destroy buttons
for(i=0;i&lt;btn_count-3;i+=1){
  with(btn_array[i mod 10, i div 10]){
    instance_destroy();
  }
}
for(i=0;i&lt;3;i+=1){
  with(btn_array[i*3,4]){
    instance_destroy();
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Keyboard Input

//Update Name String
if (string_length(namestr) &lt; max_length){
  if ((string_length(namestr)+string_length(keyboard_string)) &lt;= max_length){
    namestr = string_insert(keyboard_string,namestr,textind);
    textind = string_length(namestr)+1;
    keyboard_string = ''
  }else{
    namestr = string_insert(string_copy(keyboard_string,0,max_length-string_length(namestr)),namestr,textind);
    textind = max_length+1;
    keyboard_string = "";
  }
}
///ctrl+v paste operation
if(keyboard_check(vk_control) &amp;&amp; keyboard_check(ord('V'))){
  if hovered.btn_row == 0{
    if (clipboard_has_text()){
        if (string_length(namestr) &lt; max_length){
        textind += string_length(string_copy(clipboard_get_text(),0,max_length - string_length(namestr)))
        namestr = string_insert(string_copy(clipboard_get_text(),0,max_length - string_length(namestr)),namestr,textind-1)
      }
    }
  }
}
//Use Backspace
if (cancel_btn){
  if (string_length(namestr) &gt; 0){
    namestr = string_delete(namestr,textind-1,1);
    textind -= 1;
  }
  io_clear2();
}
//Check Confirm Key
if (confirm_btn){
  event_user(1);
  io_clear2();
}
//check arrowkeys

//move left
if(arrow_left){
  if (hovered.btn_column &gt; 0){
    hovered = btn_array[hovered.btn_column - 1,hovered.btn_row];
  }else{
    hovered = btn_array[row_width[hovered.btn_column]-1,hovered.btn_row];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move right
if(arrow_right){
  var checked;
  
  //for dealing with objects that take up multiple slots //while hovered is the same as the next thing
  checked = btn_array[(hovered.btn_column + 1) mod (row_width[hovered.btn_row]),hovered.btn_row];
  for(i=2; i&lt;row_width[hovered.btn_row] &amp;&amp; hovered == checked;i+=1){
    checked = btn_array[(hovered.btn_column + i) mod (row_width[hovered.btn_row]),hovered.btn_row];
  }
  hovered = checked;
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move up
if(arrow_up){
  if (hovered.btn_row &gt; 0){
    hovered = btn_array[hovered.btn_column,hovered.btn_row - 1];
  }else{
    hovered = btn_array[hovered.btn_column,column_height[hovered.btn_column] - 1];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move down
if(arrow_down){
  if (hovered.btn_row &lt; column_height[hovered.btn_column]-1){
    hovered = btn_array[hovered.btn_column,hovered.btn_row + 1];
  }else{
    hovered = btn_array[hovered.btn_column,0];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

if(arrow_right || arrow_left || arrow_down || arrow_up){
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Press Button
switch(hovered.btn_index){
case 29://SHIFT
  uppercase = !uppercase;
  for(i=0;i&lt;26;i+=1){
    btn_array[i mod 10,i div 10].text = chr(i+97-(32*uppercase));
  }
  break;

case 40://BACKSPACE
  if (string_length(namestr) &gt; 0){
    namestr = string_delete(namestr,textind-1,1);
    textind -= 1;
  }
  break;
  
case 41://CANCEL
  with(root){
    event_user(2);
  }
  root.active = true;
  instance_destroy();
  break;
  
case 42://END
  if(file_exists(string(namestr) + '.txt')){
    answer = show_question("There is already a character named " + namestr + ". Do you want to overwrite this character?");
    if(!answer){
      exit;
    }
  }
  root.charcrt_name = namestr;
  root.crnt_step += 1;
  root.active = true;
  with(root){
    event_user(2);
  }
  instance_destroy();
  break;
  
default://enter keystroke
  if (string_length(namestr) &lt; max_length){
    namestr += hovered.text;
    textind += 1;
  }
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Keyboard Constants
width = 10;
height = 5;
btn_count = 43;

for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}
for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}


for(i=0;i&lt;26;i+=1){
  btn_labels[i] = chr(i+97);
}
btn_labels[26] = '.';
btn_labels[27] = "'";
btn_labels[28] = '';

btn_labels[29] = "Shift";

for(i=30;i&lt;40;i+=1){
  btn_labels[i] = chr(i+18);
}

btn_labels[40] = "&lt;-BACK"
btn_labels[41] = "CANCEL";
btn_labels[42] = "END";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
uppercase = false;
max_length = 16;
blink = 0;

textind = 1;
namestr = "";

//create textbox
textbox = instance_create(x+64,y+192,obj_btn);
textbox.sprite_index = spr_textbox_112x32;


//create buttons
k = 0;
for(i=0;i&lt;4;i+=1){
  for(j=0;j&lt;row_width[i];j+=1){
    lastcreated = instance_create(x+64+j*32,y+256+i*32,obj_btn);
    lastcreated.text = btn_labels[k];
    lastcreated.btn_row = i;
    lastcreated.btn_column = j;
    lastcreated.btn_index = k;
    lastcreated.sprite_index = spr_btn_32x32;
    lastcreated.border_sprite = spr_selection_32x32;
    btn_array[j,i] = lastcreated;
    k+=1;
  }
}

btn_array[9,2].sprite_index = spr_btn_96x32;
btn_array[9,2].border_sprite = spr_selection_96x32;

for(i=0;i&lt;3;i+=1){
  lastcreated = instance_create(x+64+i*96,y+256+5*32,obj_btn);
  lastcreated.text = btn_labels[k+i];
  lastcreated.btn_row = 4;
  lastcreated.btn_column = i*3;
  lastcreated.btn_index = k+i;
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  btn_array[i*3+0,4] = lastcreated;
  btn_array[i*3+1,4] = lastcreated;
  btn_array[i*3+2,4] = lastcreated;
  btn_array[i*3+3,4] = lastcreated;
}
// 012  345 6789
// 0  \3   \6


hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;

io_clear2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw texts &amp; graphics
draw_set_font(font0);
draw_set_color(c_white);

draw_self();
draw_text(textbox.x,textbox.y-64,'Type a Name For Your Character');
blink += 1;
blink = blink mod 16;
if(blink &lt; 8){
  draw_text(textbox.x,textbox.y,'Name:' + string_insert('|',namestr,textind));
}else{
  draw_text(textbox.x,textbox.y,'Name:' + string_insert(' ',namestr,textind));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Toggle Uppercase
uppercase = !uppercase;
for(i=0;i&lt;26;i+=1){
  btn_array[i mod 10,i div 10].text = chr(i+97-(32*uppercase));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
