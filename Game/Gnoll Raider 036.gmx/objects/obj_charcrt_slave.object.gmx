<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive messages from the master

while (true)
    {
    // Initalise local variables for storing the packet id and size
    var packet, size;
    size = 0;

    // Receive packets from the clients
    size = receivemessage(server);
    // Break the loop if no messages were received
    if size &lt;= 0
        {
        break;
        }
    else
        {
        // Otherwise read the message
        packet = readbyte();
        // Use the packet id to decide how to handle the message
        if packet == SLAVE_ID
            {
            cjp = readint()
            global.var_numberofplayers = readint()
            i = 0
            while i &lt; cjp
                {
                pnum[i] = readint();
                pname[i] = readstring();
                pslot[i] = readint();
                //ptext[i] = readstring();
                //playerarray[i] = pnum[i],pname[i], etc.
                i += 1;
                }
            crnt_pnum = cjp
            pslot[crnt_pnum] = (cjp + 1)
            //respond immediately
            clearbuffer()
            writebyte(SLAVE_ID)
            writebyte(crnt_pnum)
            writestring(pname[crnt_pnum])
            //writestring(keyboard_string)
            sendmessage(server)
            
            cjp += 1
            break;
            }
        // A connection has been closed with a client
        if packet == MASTER_DROP
            {
            // send player back to join_lobby
            show_message("Host has disconnected");
            closesocket(server);
            room_goto(room_multiplayermenu);
            break;
            }
        // A new client position has been updated
        if packet == MLOBBY_ID
            {
            cjp = readint()
            i = 0
            while i &lt; cjp
                {
                pnum[i] = readint()
                pslot[i] = readint()
                ready[i] = readbyte()
                pname[i] = readstring()
                mu_spr[i] = readbyte();
                mu_icon[i] = readbyte();
                mu_mhp[i] = readint();
                mu_hp[i] = mu_mhp[i];
                mu_mep[i] = readint();
                mu_ep[i] = mu_mep[i];
                //ptext[i] = readstring()
                i += 1
                }
            break;
            }
        if packet == NEXT_ROOM
            {
            roomprevious = room;
            nextroom = readint();
            global.startx = 944;
            global.starty = 304;
            instance_create(0,0,obj_control);
            room_goto(room_lair01);
            break;
            }
        }
    }

/*English Translation:
start a loop that goes on until its broken
        
        check for messages from the server. if there aren't any, break out of the loop
         

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send drop information to master

clearbuffer();
writebyte(SLAVE_DROP);
writebyte(current_pnum)
sendmessage(server);
dllfree()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
