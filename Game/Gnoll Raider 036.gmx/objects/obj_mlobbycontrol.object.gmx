<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///declare variables and such
//cjp = currently joined players
if (!global.returning){
  declare_multiplayer_variables();
  //create the broadcast port
  temp_socket = udpconnect(PORT_PING,1);
  if (temp_socket &lt; 0){
    show_message("Failed to listen on port");
    game_end();
  }
}else{
  keyboard_string = '';
  global.returning = true;
}



disconnected = false;
width = 1;
height = 3;

btn_labels[0] = "Choose Character";
btn_labels[1] = "Start";
btn_labels[2] = "Cancel";


//find ip mask
var temp_string, my_char, period_count;
period_count = 0;
temp_string = "";
//XXX.XXX.XXX.XXX
//process current ip address
for(i=0;i&lt;string_length(myip);i+=1){
  my_char = string_char_at(myip,i);
  temp_string = temp_string + my_char;
  if(my_char == '.'){
    period_count += 1;
    if(period_count == 3){
      break;
    }
  }
}
ip_mask = temp_string;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create listening port
if global.returning == false
    {
    socket[0] = tcplisten(PORT_MASTER,8,1);
    if socket[0] &lt;= 0
        {
        show_message("Failed to listen on port");
        game_end();
        }
    }
else
    {
    global.returning = false
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Menu

for(i=0;i&lt;height;i+=1){
  lastcreated = instance_create(x+192,y+128+(i*32),obj_btn);
  lastcreated.btn_column = 0;
  lastcreated.btn_row = i;
  btn_array[0,i] = lastcreated;
  lastcreated.text = btn_labels[i];
  lastcreated.btn_index = i;
  lastcreated.empty = false;
  lastcreated.border_sprite = spr_selection_96x32;
}

hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wait for &amp; accept joiners
//if the listening port gets anything, it establishes a connection with that player

socket[cjp] = tcpaccept(socket[0],1);
if socket[cjp] &lt; 1
    {
    exit;
    }
else
    {
    //player[1] = socket[1] (player[1] is player 2, don't get confused)
    //global.playerarray[cjp] = global.socket[cjp] etc;
    clearbuffer();
    writebyte(SLAVE_ID);
    writeint(cjp);
    writeint(global.var_numberofplayers);
    i = 0
    while i &lt; cjp
        {
        writeint(pnum[i])
        writestring(pname[i])
        writeint(lobby_pslot())
        //writestring(ptext[i])
        i += 1
        }
    sendmessage(socket[cjp]);
    //very desperate
    while (true)
        {
        packet = 0
        size = 0
        while size == 0
            {
            size = receivemessage(socket[cjp]);
            }
        packet = readbyte()
        if packet == SLAVE_ID
            {
            // Get the multiplayer id of the object and strings
            sid = readbyte();
            pname[sid] = readstring()
            //pslot[sid] = readint()
            cjp += 1
            cjpincreased = true
            //ptext[i] = readstring()
            break;
            }
        }
    }

/* English Translation:
set global socket [index of cjp, lets say "1"] equal to id of accepted connection socket
    if there was no connection waiting, exit
HOWEVER: if there was a connection waiting, 
    Now get ready to write a message:
            header: slave's id
            write integer: currently joined players, aka, "1"
        i = 0 
        while i &lt; 1 WHAT??? oh, okay.
        loop0
            {
            write pnum[0], that is, hosts name
            write pname[0], that is, hosts name
            i++ (now equals 1 and is no longer &lt; 1)
            }
        done, send to socket[1]!
        cjp now = 2
        cjp has increased!
this doesn't seem to be causing the problem
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive messages from the slaves

while (true)
    {
    // Initalise local variables for storing the packet id and size
    var packet, size;
    size = 0;

    // Receive packets from the clients
    for(i = 1; i &lt; cjp; i += 1)
        {
        size = receivemessage(socket[i]);
        // If a message was received, break the loop
        if (size &gt; 0)
            break;
        }

    // Break the loop if no messages were received
    if (size &lt;= 0)
        break;

    // Otherwise read the message
    packet = readbyte();

    // Use the packet id to decide how to handle the message
    // inside a switch statement

        // A connection has been closed with a client
    if packet == SLAVE_DROP
        {
        sid = readbyte()
        //show_message("Player " +string(pslot[sid])+ " has disconnected");
        i = sid   //sid is the pnum of dropped slave, say 2
        while i &lt; cjp   //for instance, less than 4, [IDs 2-3]
            {
            if i != cjp-1 
            //this way if pnum[2] drops, player 3(4-1=3) 
                {
                pname[i] = pname[i+1]
                pslot[i] = pslot[i+1] //pslot[1] = pslot[2]
                socket[i] = socket[i+1]
                ready[i] = ready[i+1]
                mu_spr[i] = mu_spr[i+1]
                mu_icon[i] = mu_icon[i+1]
                mu_mhp[i] = mu_mhp[i+1]
                mu_mep[i] = mu_mep[i+1]
                //ptext[i] = ptext[i+1]
                }
            else
                {
                pname[i] = ''
                socket[i] = 0
                ready[i] = false
                //ptext[i] = ''
                }
            i += 1;  
            }
        cjp -= 1;
        cjpincreased = true
        break;
        }
            


    //new player has been accepted
    if (packet == SLAVE_ID)
        {
        // Get the multiplayer id of the object and strings
        sid = readbyte();
        pname[sid] = readstring();
        //pslot[sid] = readint()
        cjpincreased = true;
        break;
        }

          
    if (packet == SLAVE_INFO)
        {
        // update text and position. maybe set something up in case of conflicts
        sid = readbyte();
        pslot[sid] = readint();
        ready[sid] = readbyte();
        pname[sid] = readstring();
        mu_spr[sid] = readbyte();
        mu_icon[sid] = readbyte();
        mu_mhp[sid] = readint();
        mu_hp[sid] = mu_mhp[sid];
        mu_mep[sid] = readint();
        mu_ep[sid] = mu_mep[sid];
        //ptext[i] = readstring()
        cjpincreased = true;
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send information to currently joined players
/*
these are the things the master needs to tell the players
his texts
the names of the other players
the numbers of the other players
*/

if cjp &gt; 1
    {
    if cjpincreased = true
        {
        clearbuffer();
        writebyte(MLOBBY_ID);
        writeint(cjp);
        i = 0;
        while i &lt; cjp
            {
            writeint(pnum[i]);
            writeint(pslot[i]);
            writebyte(ready[i]);
            writestring(pname[i]);
            writebyte(mu_spr[i]);
            writebyte(mu_icon[i]);
            writeint(mu_mhp[i]);
            writeint(mu_mep[i]);
            //writestring(textmessage[i])
            //playerarray[i] = pnum[i],pname[i], etc.
            i += 1;
            }
        slave_sendall();
        cjpincreased = false;
        }
    }

/* English Translation:
    if cjp is greater than 1, that is, if someone has joined the game, then continue.
        if currently joined players have increased...
        write a message and write the new stats:
        i = 0
    while i is less than the number of players (say 2)
    loop0{
        writeint(pnum0)
        writestring(pname0)        
        }
      and so on. well, this script checks out.        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///broadcast to computers on network the presence of an available game
if(cjp &lt; 8){
  event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input

if(confirm_btn){//press enter
  event_user(1);
  io_clear2();
}else{  //check arrowkeys
  var xpos, ypos;
  xpos = hovered.btn_column;
  ypos = hovered.btn_row;
  
  //move left
  if(arrow_left){
    if (xpos &gt; 0){
      xpos -= 1;
    }else{
      xpos = width-1;
    }
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = width-1;
        }
      }//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move right
  if(arrow_right){
    xpos = (xpos+1) mod width;
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i=(i+1)mod width){}//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move up
  if(arrow_up){
    if (xpos == width-1 || ypos &gt; 0){
     if (ypos &gt; 0){
        ypos -= 1;
      }else{
        ypos = height-1;
      }
      for(i=ypos;btn_array[xpos,i].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = height-1;
        }
      }//scroll up the column to find the next non-empty space
      ypos = i; 
    }else if(line_index &gt; 0){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll up the page
      line_index -= 1;
      scrollbtn_down.image_index = 0;
      if (line_index == 0){
        scrollbtn_up.image_index = 1;
      }
      event_user(2);
    }
    io_clear2();
  }
  
  //move down
  if(arrow_down){
    if (xpos == width-1 || ypos &lt; height-1){
     if (ypos &lt; height-1){
        ypos = (ypos+1)mod height;
        for(i=ypos;btn_array[xpos,i].empty;i=(i+1)mod height){}//scroll down the column to find the next non-empty space
        ypos = i; 
      }
    }else if(line_index &lt; ds_list_size(skill_list)-4){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll down the page
      line_index += 1;
      scrollbtn_up.image_index = 0;
      if (line_index == ds_list_size(skill_list)-4){
        scrollbtn_down.image_index = 1;
      }
      event_user(2);
    }
    io_clear2();
  }
  
  hovered = btn_array[xpos,ypos];
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attempt to start game or leave lobby
switch(hovered.btn_index){
case 0://Choose Character
  room_goto(room_charactermain);
  break;
case 1://Start Game
  allready = true;
  for(i=0;i&lt;cjp;i+=1){
    if (!ready[i]){
      allready = false;
      break;
    }
  }
  if (allready){
    disconnected = true;
    event_user(0);
    closesocket(temp_socket);
    clearbuffer();
    writebyte(NEXT_ROOM);
    slave_sendall();
    room_origin = room;
    start_game();
  }else{
    show_message("one or more player(s) are not ready yet")
  }
  break;
    
case 2: //Cancel
  disconnected = true;
  event_user(0);
  closesocket(temp_socket);
  clearbuffer();
  writebyte(MASTER_DROP);
  slave_sendall();
  for(i=0;i&lt;cjp;i+=1){
    closesocket(socket[i]);
  }
  global.multiplayer = false;
  room_goto(room_multiplayermenu);
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Poll IP addresses

var temp_string;

j = 0;
for(i=0;i&lt;256;i+=1){
  temp_string = ip_mask + string(i);
  clearbuffer();
  writestring(myip);
  writestring("Crazy Monkey Man II");
  writebyte(disconnected);
  sendmessage(temp_socket,temp_string, PORT_SLAVE, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///master drop
disconnected = true;
event_user(0);
clearbuffer();
writebyte(MASTER_DROP);
slave_sendall();
dllfree()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff
draw_set_color(c_white);
draw_set_font(font0);

draw_self();

for(i=0;i&lt;8;i+=1){
  if (ready[i] &amp;&amp; i &lt;cjp){
    draw_sprite(spricon[mu_spr[i]],mu_icon[i],x+64,y+140+(48*i));
    draw_text(x+112,y+128+(48*i),pname[i]);
    draw_text(x+112,y+128+(48*i),pname[i]);
  }
draw_sprite(spr_border_48x48,0,x+112,y+128+(48*i));
}

draw_text(x+64,y+128+(48*9),myip);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
