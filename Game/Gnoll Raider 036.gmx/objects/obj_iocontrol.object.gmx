<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Global Button Variables
///Declare Global Button Variables
cleared = false;

globalvar
  io_control,
  control_type,
  start_btn, 
  confirm_btn, 
  cancel_btn, 
  arrow_right, 
  arrow_up, 
  arrow_left, 
  arrow_down, 
  pivot_btn, 
  strafe_btn, 
  sprint_btn, 
  sneak_btn, 
  attack_btn, 
  jump_btn, 
  toggle_btn, 
  interact_btn, 
  abl_btn, 
  item_btn,
  ;

io_control = id;
  
abl_btn[0] = false;
abl_btn[1] = false;
abl_btn[2] = false;
abl_btn[3] = false;

item_btn[0] = false;
item_btn[1] = false;
item_btn[2] = false;
item_btn[3] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Break
cleared = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process User Input

//update controller
control_type = xin_update(0);//true = controller, false = keyboard
if(!cleared){
  if(xin_update(control_type)){
    //immediate press
    start_btn = xin_check(0,xb_start);
    confirm_btn = xin_check(0,xb_b);
    cancel_btn = xin_check(0,xb_a);
  
    arrow_right =(xin_get_state(0,xb_leftThumbX)&gt;0);
    arrow_up = (xin_get_state(0,xb_leftThumbY)&lt;0);
    arrow_left = (xin_get_state(0,xb_leftThumbX)&lt;0);
    arrow_down = (xin_get_state(0,xb_leftThumbY)&gt;0);
    
    pivot_btn = xin_check(0,xb_leftTrigger);
    strafe_btn = xin_check(0,xb_leftShoulder);
    sprint_btn = xin_check(0,xb_rightTrigger);
    sneak_btn = xin_check(0,xb_rightShoulder);
    
    attack_btn = xin_check(0,xb_b);
    jump_btn = xin_check(0,xb_a);
    toggle_btn = xin_check(0,xb_x);
    interact_btn = xin_check(0,xb_y);
    
    abl_btn[0] = xin_check(0,xb_right);
    abl_btn[1] = xin_check(0,xb_up);
    abl_btn[2] = xin_check(0,xb_left);
    abl_btn[3] = xin_check(0,xb_down);
    
    item_btn[0] = (xin_get_state(0,xb_rightThumbX)&gt;0);//rightstick = right
    item_btn[1] = (xin_get_state(0,xb_rightThumbY)&lt;0);//rightstick = up
    item_btn[2] = (xin_get_state(0,xb_rightThumbX)&lt;0);//rightstick = left 
    item_btn[3] = (xin_get_state(0,xb_rightThumbY)&gt;0);//rightstick = down
    
    //check pressed
    /*
    start_btn_pressed = xin_check_pressed(0,xb_start);
    confirm_btn_pressed = xin_check_pressed(0,xb_b);
    cancel_btn_pressed = xin_check_pressed(0,xb_a);
  
    arrow_right_pressed =(xin_get_state(0,xb_leftThumbX)&gt;0);
    arrow_up_pressed = (xin_get_state(0,xb_leftThumbY)&lt;0);
    arrow_left_pressed = (xin_get_state(0,xb_leftThumbX)&lt;0);
    arrow_down_pressed = (xin_get_state(0,xb_leftThumbY)&gt;0);
    
    pivot_btn_pressed = xin_check_pressed(0,xb_leftTrigger);
    strafe_btn_pressed = xin_check_pressed(0,xb_leftShoulder);
    sprint_btn_pressed = xin_check_pressed(0,xb_rightTrigger);
    sneak_btn_pressed = xin_check_pressed(0,xb_rightShoulder);
    
    attack_btn_pressed = xin_check_pressed(0,xb_b);
    jump_btn_pressed = xin_check_pressed(0,xb_a);
    toggle_btn_pressed = xin_check_pressed(0,xb_x);
    interact_btn_pressed = xin_check_pressed(0,xb_y);
    
    abl_btn_pressed[0] = xin_check_pressed(0,xb_right);
    abl_btn_pressed[1] = xin_check_pressed(0,xb_up);
    abl_btn_pressed[2] = xin_check_pressed(0,xb_left);
    abl_btn_pressed[3] = xin_check_pressed(0,xb_down);
    
    item_btn_pressed[0] = (xin_get_state(0,xb_rightThumbX)&gt;0);//rightstick = right
    item_btn_pressed[1] = (xin_get_state(0,xb_rightThumbY)&lt;0);//rightstick = up
    item_btn_pressed[2] = (xin_get_state(0,xb_rightThumbX)&lt;0);//rightstick = left 
    item_btn_pressed[3] = (xin_get_state(0,xb_rightThumbY)&gt;0);//rightstick = down
    */
    
  }else{//KEYBOARD KEYCODES
    //check immediate
    start_btn = keyboard_check(vk_shift);
    confirm_btn = keyboard_check(vk_enter);
    cancel_btn = keyboard_check(vk_backspace);
  
    arrow_right = keyboard_check(vk_right);
    arrow_up = keyboard_check(vk_up);  
    arrow_left = keyboard_check(vk_left);
    arrow_down = keyboard_check(vk_down);
    
    pivot_btn = keyboard_check(ord('C'));
    strafe_btn = keyboard_check(ord('V'));
    sprint_btn = keyboard_check(ord('Q')) &amp;&amp; keyboard_check(vk_alt) &amp;&amp; !keyboard_check(vk_space);
    sneak_btn = keyboard_check(ord('W')) &amp;&amp; keyboard_check(vk_alt) &amp;&amp; !keyboard_check(vk_space);
    
    attack_btn = keyboard_check(ord('E')) &amp;&amp; !keyboard_check(vk_space) &amp;&amp; !keyboard_check(vk_alt);
    jump_btn = keyboard_check(ord('R')) &amp;&amp; !keyboard_check(vk_space) &amp;&amp; !keyboard_check(vk_alt);
    toggle_btn = keyboard_check(ord('E')) &amp;&amp; keyboard_check(vk_alt) &amp;&amp; !keyboard_check(vk_space);
    interact_btn = keyboard_check(ord('R')) &amp;&amp; keyboard_check(vk_alt) &amp;&amp; !keyboard_check(vk_space);
    
    abl_btn[0] = keyboard_check(ord('Q')) &amp;&amp; keyboard_check(vk_space);
    abl_btn[1] = keyboard_check(ord('W')) &amp;&amp; keyboard_check(vk_space);
    abl_btn[2] = keyboard_check(ord('E')) &amp;&amp; keyboard_check(vk_space);
    abl_btn[3] = keyboard_check(ord('R')) &amp;&amp; keyboard_check(vk_space);
    
    item_btn[0] = keyboard_check(ord('1'));
    item_btn[1] = keyboard_check(ord('2'));
    item_btn[2] = keyboard_check(ord('3'));
    item_btn[3] = keyboard_check(ord('4'));
    
    //check pressed
    /*
    start_btn_pressed = keyboard_check_pressed(vk_shift);
    confirm_btn_pressed = keyboard_check_pressed(vk_enter);
    cancel_btn_pressed = keyboard_check_pressed(vk_backspace);
  
    arrow_right_pressed = keyboard_check_pressed(vk_right);
    arrow_up_pressed = keyboard_check_pressed(vk_up);  
    arrow_left_pressed = keyboard_check_pressed(vk_left);
    arrow_down_pressed = keyboard_check_pressed(vk_down);
    
    pivot_btn_pressed = keyboard_check_pressed(ord('C'));
    strafe_btn_pressed = keyboard_check_pressed(ord('V'));
    sprint_btn_pressed = keyboard_check_pressed(ord('Q'));
    sneak_btn_pressed = keyboard_check_pressed(ord('W'));
    
    attack_btn_pressed = keyboard_check_pressed(ord('E'));
    jump_btn_pressed = keyboard_check_pressed(ord('R'));
    toggle_btn_pressed = keyboard_check_pressed(ord('E')) &amp;&amp; keyboard_check_pressed(vk_alt);
    interact_btn_pressed = keyboard_check_pressed(ord('R')) &amp;&amp; keyboard_check_pressed(vk_alt);
    
    abl_btn_pressed[0] = keyboard_check_pressed(ord('A')) &amp;&amp; keyboard_check_pressed(vk_space);
    abl_btn_pressed[1] = keyboard_check_pressed(ord('S')) &amp;&amp; keyboard_check_pressed(vk_space);
    abl_btn_pressed[2] = keyboard_check_pressed(ord('D')) &amp;&amp; keyboard_check_pressed(vk_space);
    abl_btn_pressed[3] = keyboard_check_pressed(ord('F')) &amp;&amp; keyboard_check_pressed(vk_space);
    
    item_btn_pressed[0] = keyboard_check_pressed(ord('1'));
    item_btn_pressed[1] = keyboard_check_pressed(ord('2'));
    item_btn_pressed[2] = keyboard_check_pressed(ord('3'));
    item_btn_pressed[3] = keyboard_check_pressed(ord('4'));
    */
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear input
io_clear2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
