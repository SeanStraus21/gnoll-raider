<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_dialogue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>obj_menu_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
log_ind = 0;
log_page = 1;
text_h = 12;
char_w = 4
logwin_width = 7*16*SV;
logwin_lnum = (6*16*SV)div(text_h);
optwin_width = 8.5*16*SV;
optwin_lnum = (5.5*16*SV)div(text_h);
opt_ind = 0;
display_log = ds_list_create();
option_objects = ds_list_create();
position_x = 0;
position_y = 0;
lastcreated = instance_create(x+176*SV,y+88*SV,obj_menu_dlg_arrows);
lastcreated.dlg_menu = id;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up
ds_list_destroy(option_objects)
with obj_menu_dlg_option
    {
    instance_destroy();
    }
with obj_menu_dlg_arrows
    {
    instance_destroy();
    }
with obj_menu_dlg_portrait
    {
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff

//Draw Background
draw_self();

//Draw Portraits
for (i=0;i&lt;ds_list_size(participants);i+=1)
    {
    draw_sprite(spriconlg[mu_spr[ds_list_find_value(participants,i).controlling_player]],mu_icon[ds_list_find_value(participants,i).controlling_player],x+8+16*SV,y+24+16*i*SV);
    }

//Draw Dialogue history
draw_set_font(font0);
draw_set_color(c_white);
for (i=0;i&lt;(ds_list_size(display_log)-log_ind);i+=1) //for each line of space, write a line from the log
    {
    if i &lt; logwin_lnum
        {
        draw_text(x+(72*SV),y+24*SV+(text_h*i),ds_list_find_value(display_log,i+log_ind));
        }
    else
        {
        break;
        }
    }
    
// draw page number &amp; name
    draw_text(x+210*SV,y+92*SV,target_npc.npc_name)
    draw_text(x+210*SV,y+104*SV,"Pg. "+string(log_page)+"/"+string(target_npc.log_pcount));
    
//draw selection boxes
if position_x == 0
    {
    if instance_exists(obj_menu_dlg_option)
        {
        //draw a thin, lightgreen border around the y_position option
        draw_set_color($60FF60);
        draw_rectangle(hovered.x-12,hovered.y+6,hovered.x+(optwin_width),hovered.y+6+(hovered.size*text_h),true);
        }
    }
else
    {
    //draw a box around the log arrows
    draw_sprite(spr_selection_32x48,0,x+182*SV,y+94*SV)
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Down

//
if (target_npc.talking == false)
    {
    if position_x == 0 //if selection is in the option box
        {
        if position_y != (ds_list_size(option_objects)-1) // if selection is not at the bottom of the box
            {
            position_y +=1;
            hovered = ds_list_find_value(option_objects,hovered.index+1);
            }
        else    // if selection is at the bottom of the box
            {
            if opt_ind != (ds_list_size(target_npc.dlg_opts)-1) //if not at the bottom of the option list
                {
                opt_ind += 1;//scroll down
                //destroy top option, create new bottom option, hovered equal the new one
                ds_list_clear(option_objects);
                with obj_menu_dlg_option
                    {
                    instance_destroy();
                    }
                line_count = 0;//there are no lines printed yet
                for(j=0;(j+opt_ind)&lt;ds_list_size(target_npc.dlg_opts);j+=1) //start at 0 and iterate until the last option is found or until space runs out
                    {
                    opt_text = (string(j+opt_ind+1)+". "+ds_list_find_value(target_npc.dlg_opts,j+opt_ind));//number the options
                    opt_size = count_formatted_lines(opt_text,128*SV);//determine number of wordlines in the option
                    if (line_count+opt_size) &lt;= optwin_lnum //
                        {
                        lastcreated = instance_create(x+(72*SV),y+128*SV+(text_h*(line_count)),obj_menu_dlg_option)
                        lastcreated.creator = id;
                        lastcreated.key = j+opt_ind; //option key = 
                        lastcreated.index = j; //index = number in list of displayed options (0-?)
                        lastcreated.text = opt_text;
                        lastcreated.size = opt_size;
                        ds_list_add(option_objects,lastcreated);
                        line_count += opt_size; //
                        }
                    else
                        {
                        break;
                        }
                    }
                hovered = ds_list_find_value(option_objects,ds_list_size(option_objects)-1);
                position_y = ds_list_size(option_objects)-1;
                }
            }
        }
    else    //selection is in the dialogue history box
        {
        if log_page != target_npc.log_pcount
            {
            log_ind += logwin_lnum;
            log_page += 1;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch about
if position_x == 0
    {
    position_x = 1;
    }
else
    {
    position_x = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Up

//
if (target_npc.talking == false)
    {
    if position_x == 0 //if selection is in the option box
        {
        if position_y != 0 // if selection is not at the top
            {
            position_y -=1;
            hovered = ds_list_find_value(option_objects,hovered.index-1);
            }
        else    // if selection is at the top
            {
            if opt_ind != 0 //if not at the top of the option list
                {
                opt_ind -= 1;
                //destroy bottom option, create new top option, hovered equal the new one
                ds_list_clear(option_objects);
                with obj_menu_dlg_option
                    {
                    instance_destroy();
                    }
                line_count = 0;//there are no lines printed yet
                for(j=0;(j+opt_ind)&lt;ds_list_size(target_npc.dlg_opts);j+=1) //for each possible option
                    {
                    opt_text = (string(j+opt_ind+1)+". "+ds_list_find_value(target_npc.dlg_opts,j+opt_ind));//add speaker's name to text
                    opt_size = count_formatted_lines(opt_text,128*SV);//determine number of lines in text
                    if (line_count+opt_size) &lt;= optwin_lnum //if 2+1 &lt;= 6, which it is
                        {
                        lastcreated = instance_create(x+(72*SV),y+128*SV+(text_h*(line_count)),obj_menu_dlg_option)
                        lastcreated.creator = id;
                        lastcreated.key = opt_ind+j; //option index = dlg_opt_ids[j+opt_ind]
                        lastcreated.index = j;
                        lastcreated.text = opt_text;
                        lastcreated.size = opt_size;
                        ds_list_add(option_objects,lastcreated);
                        line_count += opt_size; //
                        }
                    else
                        {
                        break;
                        }
                    }
                position_y = 0;
                hovered = ds_list_find_value(option_objects,0);
                }
            }
        }
    else    //selection is in the dialogue history box
        {
        if log_ind !=0
            {
            log_ind -= logwin_lnum;
            log_page -= 1;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///switch about
if position_x == 0
    {
    position_x = 1;
    }
else
    {
    position_x = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
