<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input
//if not the active submenu, get out;
if(root.active_submenu != id){
  hover_border.visible = false;
  exit;
}else{
  hover_border.visible = true;
}
//check arrowkeys

//move left
if(arrow_left){
  if (hovered.column &gt; 0){
    hovered = btn[hovered.column - 1,hovered.row];
  }else{
    hovered = btn[w-1,hovered.row];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move right
if(arrow_right){
  var checked;
  
  //for dealing with objects that take up multiple slots //while hovered is the same as the next thing
  checked = btn[(hovered.column + 1) mod (w),hovered.row];
  for(i=2; i&lt;w &amp;&amp; hovered == checked;i+=1){
    checked = btn[(hovered.column + i) mod (w),hovered.row];
  }
  hovered = checked;
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move up
if(arrow_up){
  if (hovered.row &gt; 0){
    hovered = btn[hovered.column,hovered.row - 1];
  }else{
    if(!scroll_enabled){
      hovered = btn[hovered.column,h - 1];
    }else{
      if(line_index &gt; 0){
        line_index -= 1;
        event_user(3);
      }
    }
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move down
if(arrow_down){
  if (hovered.row &lt; h-1){
    hovered = btn[hovered.column,hovered.row + 1];
  }else{
    if(!scroll_enabled){
      hovered = btn[hovered.column,0];
    }else{
      if(line_index &lt; max_line_index){
        line_index += 1;
        event_user(3);
      }
    }
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

if(arrow_right || arrow_left || arrow_down || arrow_up){
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///select item
if(!hovered.empty){
  selected = hovered;
  selection_border.sprite_index = selected.border_sprite;
  selection_border.x = selected.x;
  selection_border.y = selected.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialization
depth = root.depth - 1;
s = 0;
for(i=0;i&lt;h;i+=1){
  for(j=0;j&lt;w;j+=1){
    lastcreated = instance_create(x+(btn_w*j)+btn_x,y+(btn_h*i)+btn_y,obj_btn);
    lastcreated.sprite_index = btn_sprite;
    lastcreated.border_sprite = border_sprite;
    lastcreated.column = j;
    lastcreated.row = i;
    lastcreated.btn_index = s;
    lastcreated.depth = depth - 1;
    btn[j,i] = lastcreated;
    s+=1;
  }
}
//scrolling setup
line_index = 0;
max_line_index = h;//default maximum value is height. change this later if desired
if (scroll_enabled){
//create scrollbuttons
  scrollbtn_up = instance_create(x+(w/2)-(16),y+h,obj_btn);
  scrollbtn_up.sprite_index = spr_btn_arrow_up;
  scrollbtn_up.image_index = 1;
  scrollbtn_up.image_speed = 0;
  
  scrollbtn_down = instance_create(x+(w/2)-(16),y+h,obj_btn);
  scrollbtn_down.sprite_index = spr_btn_arrow_down;
  scrollbtn_down.image_index = 0;
  scrollbtn_down.image_speed = 0;
}

//hover setup
hovered = btn[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
hover_border.depth = depth-2;

//selection setup
selected = noone;
selection_border = instance_create(x,y,obj_selection);
selection_border.sprite_index = noone;
selection_border.image_index = 1;
selection_border.image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
