<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_menu_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
active = true;
globalvar server;
server = -1;
global.returning = false;

session_list = ds_map_create();

btn_labels[0] = "Create Warband";
btn_labels[1] = "Load Warband";
btn_labels[2] = "Join Warband";
btn_labels[3] = "Arena Battle";
btn_labels[4] = "Cancel";

//set alarm to scan pings
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Submenus
active_submenu = id;
//create main submenu
main = create_submenu(224,160,1,5,spr_btn_96x32,spr_selection_96x32,96,32,0,0,false);
for(i = 0; i &lt; main.s; i+=1){
  main.btn[0,i].text = btn_labels[i];
}
//create join submenu
join_submenu = create_submenu(128,192,1,5,spr_gameslot,spr_selection_96x32,96,64,0,0,true);

//set active submenu
main.active = true;
active_submenu = main;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create listening port

temp_socket = network_create_server(network_socket_udp,PORT_SLAVE,12);
if (temp_socket &lt; 0){
  show_message_menu("Failed to listen on port");
  waiting_for = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input
if(confirm_btn){//press enter
  event_user(0);
  io_clear2();
}
if(cancel_btn){//press enter
  event_user(1);
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for Pings
var packet, crnt_ip, crnt_name, disconnected;

//read packet
packet = readbyte();
crnt_name = readstring();
disconnected = readbool();
crnt_ip = ds_map_find_value(async_load,"ip");

//update the slots
event_user(14);
alarm[0] = 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return From Popup Window
switch(return_from){
case 0:
  break;
case 1:
  game_end();
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update gameslots

var crnt_key;
crnt_key = ds_map_find_first(session_list);

for(i=0;i&lt;join_submenu.height;i+=1){
  if(i &lt; ds_map_size(session_list)){
    join_submenu.btn[0,i].ip = crnt_key;
    join_submenu.btn[0,i].text = crnt_key//btn_array[0,i].text = ds_map_find_value(session_list,crnt_key);
    join_submenu.btn[0,i].image_index = 1;
    crnt_key = ds_map_find_next(session_list,crnt_key);
    join_submenu.btn[0,i].empty = false;
  }else{
    join_submenu.btn[0,i].ip = "";
    join_submenu.btn[0,i].text = "";
    join_submenu.btn[0,i].image_index = 0;
    join_submenu.btn[0,i].empty = true;
  }
}
if(join_submenu.selected != noone){
  if(join_submenu.selected.empty){
    join_submenu.selected = noone;
    join_submenu.selection_border.sprite_index = noone;
  }
}
if(join_submenu.hovered.empty){
  join_submenu.hovered = btn_array[0,0]
  join_submenu.hover_border.x = hovered.x;
  join_submenu.hover_border.y = hovered.y;
  join_submenu.hover_border.sprite_index = hovered.border_sprite;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cancel button pressed
switch(active_submenu){
case(main):
  sound_play(snd_click);
  global.multiplayer = false;
  network_destroy(temp_socket);
  ds_map_destroy(session_list);
  room_goto(room_mainmenu);
  break;
case(join_submenu):
  active_submenu = main;
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create, load, join, enter arena, or quit
//this needs to connect the player to his selected host
if(active_submenu == main){
  switch(main.hovered.btn_index){
  case 0: //Create Warband
    sound_play(snd_click);
    global.multiplayer = true;
    global.master = true;
    crnt_pnum = 0;
    network_destroy(temp_socket);
    ds_map_destroy(session_list);
    room_goto(room_lobby);
    break;
  case 1: //Load Warband
    sound_play(snd_click);
    network_destroy(temp_socket);
    ds_map_destroy(session_list);
    break;
  case 2://Join Warband
    sound_play(snd_click);
    active_submenu = join_submenu;
    break;
  case 3: //Enter Arena
    sound_play(snd_click);
    global.multiplayer = false;
    global.master = true;
    network_destroy(temp_socket);
    ds_map_destroy(session_list);
    room_goto(room_arenamenu);
    break;
  case 4: //Cancel
    sound_play(snd_click);
    global.multiplayer = false;
    network_destroy(temp_socket);
    ds_map_destroy(session_list);
    room_goto(room_mainmenu);
    break;
  default: //Select a game
    if(!hovered.empty){
      selected = hovered;
      selection_border.x = selected.x;
      selection_border.y = selected.y;
      selection_border.sprite_index = selected.border_sprite;
    }
  }
}else{
    sound_play(snd_click);
    if(active_submenu.selected != noone &amp;&amp; !active_submenu.selected.empty){
      global.master = false;
      server = network_create_socket(network_socket_tcp);//create a socket
      network_connect(server,active_submenu.selected.ip,PORT_MASTER);//try to connect to server
      if (server &lt; 0){
        show_message_menu("Unable to connect to server");
        exit;
      }else{
        global.multiplayer = true;
        network_destroy(temp_socket);
        ds_map_destroy(session_list);
        room_goto(room_lobby);
      }
    }else{
      show_message_menu("You must select a game to join");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///close connection and free dll

network_destroy(temp_socket);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
