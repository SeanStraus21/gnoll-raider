<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gnoll_rogue_brown_SE</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask_iso64x32</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite, direction, and variables

xspd = 0;
yspd = 0;
zspd = 0;
z = 0; //set z coordinate to be on the ground initially.
base_z = 0;
max_diff = 16;
dir_move = 270;
dir_face = 270;
strafing = false;
pivoting = false;
jumping = false;
//create hitbox
hitbox = instance_create(x,y,obj_hitbox);
hitbox.target = id;
hitbox.sprite_index = spr_hitbox_48x64;
ground = noone;
//Set Cooldowns
atk_ready = true;
sprint_ready = true;
sneak_ready = true;

//State Variables
talking = false;
blinking = false;
channeling = false;
stunned = false;
snared = false;
sneaking = false;
invulnerable = false;

//Base Aggro
aggro = 0;

//Poison
poison_dmg = 0;
poison_duration = 0;

//Debuffs
snare_duration = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///kill unit and MU_DEAD
    //if mu_hp[controlling_player] &lt;= 0
    if (crnt_pnum == controlling_player){
      mu_graveroom[crnt_pnum] = room_id;
      mu_gravex[crnt_pnum] = x;
      mu_gravey[crnt_pnum] = y;
      lastcreated = instance_create(x,y,obj_grave);
      lastcreated.controlling_player = crnt_pnum;
      lastcreated = instance_create(x,y,obj_ghost);
      lastcreated.controlling_player = controlling_player;
      main_unit = lastcreated;
      view_object[0] = main_unit;
      pchar[crnt_pnum] = lastcreated;
      clearbuffer();
      writebyte(MU_DEAD);
      writebyte(crnt_pnum);
      writeint(mu_hp[crnt_pnum]);
      writeint(mu_ep[crnt_pnum]);
      writeint(x);
      writeint(y);
      writeint(0);
      writeint(0);
      //writeint(my_buffs)
      //writeint(my_exp)
      if (!global.master){
        sendmessage(server);
      }else{
        slave_sendall();
      }
    }else{
      lastcreated = instance_create(x,y,obj_grave);
      lastcreated.controlling_player = controlling_player;
      lastcreated = instance_create(x,y,obj_ghost);
      pchar[controlling_player] = lastcreated;
      lastcreated.controlling_player = controlling_player;
      mu_graveroom[controlling_player] = room_id;
      mu_gravex[controlling_player] = x;
      mu_gravey[controlling_player] = y;
    }
    
    /*
            case MU_STEP:
            sid = readbyte();
            mu_hp[sid] = readint();
            mx[sid] = readint();
            my[sid] = readint();
            mxspd[sid] = readint();
            myspd[sid] = readint();
            //mbuffs[sid] = readint();
            //mexp[sid] = readint();
            break;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for viable NEXT_ROOM or NEXT_CHAMBER
var allclear, possible_exit, destination;
if (crnt_pnum == controlling_player &amp;&amp; instance_number(obj_gnoll) &gt; 0){
  if (instance_number(obj_ready_portal) == instance_number(obj_gnoll)){
    allclear = false;
    possible_exit = noone;
    for(i=0;i&lt;cjp;i+=1){
      if(mu_hp[i] &gt; 0){
        if (possible_exit == noone){ //if the first live guy to be picked
          if place_meeting(pchar[i].x,pchar[i].y,obj_portal_parent){ //is touching a portal
            possible_exit = instance_place(pchar[i].x,pchar[i].y,obj_portal_parent).portal_id //test that portal
            allclear = true; //if the first liveguy is touching a portal, it could be an allclear
          }else{//else break, since someone isn't touching a portal
            break;
          }
        }else{//the first guy must have been touching a portal
          if (place_meeting(pchar[i].x,pchar[i].y,obj_portal_parent)){ //if pchar[i] is also touching a portal
            if(instance_place(pchar[i].x,pchar[i].y,obj_portal_parent).portal_id != possible_exit){//but pchar is not touching the portal
              allclear = false;//allclear goes back to false
              break;//break, since at least two people are touching different portals
            }
          }else{
            break;//else break, since someone isn't touching a portal
          }
        }
      }
    }
    if (allclear){ //if a possibility was found and not contradicted
      destination = instance_find(portal_list[possible_exit],0).destination;
      allclear = false;
      clearbuffer();
      writebyte(NEXT_ROOM);
      writeint(destination);
      if (global.master){
        writebyte(true);
        slave_sendall();
        mu_hp[crnt_pnum] = mu_mhp[crnt_pnum];//revive and restore hp to full
      }else{
        writeint(possible_exit);
        sendmessage(server);
      }
    }//Now Check if there is a valid NEXT_CHAMBER
  }else if (instance_number(obj_ready_door) == instance_number(obj_gnoll)){
    allclear = false;
    possible_exit = noone;
    for(i=0;i&lt;cjp;i+=1){
      if(mu_hp[i] &gt; 0){
        if (possible_exit == noone){ //if the first live guy to be picked
          if place_meeting(pchar[i].x,pchar[i].y,obj_door){ //is touching a portal
            possible_exit = instance_place(pchar[i].x,pchar[i].y,obj_door).destination //test that portal
            global.startx = instance_place(pchar[i].x,pchar[i].y,obj_door).destination_x;
            global.starty = instance_place(pchar[i].x,pchar[i].y,obj_door).destination_y;
            allclear = true; //if the first liveguy is touching a portal, it could be an allclear
          }else{//else break, since someone isn't touching a portal
            break;
          }
        }else{//the first guy must have been touching a portal
          if (place_meeting(pchar[i].x,pchar[i].y,obj_door)){ //if pchar[i] is also touching a portal
            if(instance_place(pchar[i].x,pchar[i].y,obj_door).destination != possible_exit){//but pchar is not touching the portal
              allclear = false;//allclear goes back to false
              break;//break, since at least two people are touching different portals
            }
          }else{
            break;//else break, since someone isn't touching a portal
          }
        }
      }
    }
    if (allclear){ //if a possibility was found and not contradicted
      allclear = false;
      clearbuffer();
      writebyte(NEXT_CHAMBER);
      writebyte(crnt_pnum);
      writeint(possible_exit);
      writeint(global.startx);
      writeint(global.starty);
      if (global.master){
        writeint(random_get_seed());
        writebyte(true);
        slave_sendall();
        mu_hp[crnt_pnum] = mu_mhp[crnt_pnum];
      }else{
        sendmessage(server);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Stun
stunned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Invulnerability
invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sneak Cooldown
sneak_ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprint Cooldown
sprint_ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Channeling
channeling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Blinking
blinking = false
image_blend = c_white
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack Cooldown
atk_ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>crnt_pnum</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>controlling_player</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Step

//Main
gnoll_step_crnt_player();


//Paranoia
if(ground){
  depth = find_depth(x,y)-15;
}
mmdir[crnt_pnum] = dir_move;
mfdir[crnt_pnum] = dir_face;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///otherplayer movement
if place_free(x+xspd,y+yspd){
  x += xspd;
  y += yspd;
}else{
  xspd = 0;
  yspd = 0;
  move_contact_solid(mmdir[controlling_player],3*SV);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite setter (otherplayer)

set_image(mu_spr[controlling_player],mfdir[controlling_player]);
if (x==xprevious &amp;&amp; y==yprevious){
  image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff
draw_sprite(spr_shadow_medium,0,x,y-(base_z/2));
if (sneaking){
  draw_sprite_ext(sprite_index,-1,x,y-(z/2)-40,1,1,0,c_white,0.5);
}else{
  draw_sprite(sprite_index,-1,x,y-(z/2)-40);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
