<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_shop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>obj_menu_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up Helpers
with (obj_menu_shop_item){
  instance_destroy();
}

for(i=0;i&lt;width*height;i+=1){
  with(btn_array[i mod width, i div width]){
    instance_destroy();
  }
}

//update the shopkeeper's inventory

//clean up list
ds_list_destroy(display_dlg);
ds_list_destroy(display_description);
ds_list_destroy(display_shop_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input

//press enter
if(confirm_btn){
  event_user(1);
  io_clear2();
}

//check arrowkeys

//move left
if(arrow_left){
  if (hovered.column &gt; 0){
    hovered = btn_array[hovered.column - 1,hovered.row];
  }else{
    hovered = btn_array[width-1,hovered.row];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move right
if(arrow_right){
  var checked;
  
  //for dealing with objects that take up multiple slots //while hovered is the same as the next thing
  checked = btn_array[(hovered.column + 1) mod width,hovered.row];
  for(i=2; i&lt;width &amp;&amp; hovered == checked;i+=1){
    checked = btn_array[(hovered.column + i) mod width,hovered.row];
  }
  hovered = checked;
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move up
if(arrow_up){
  if (hovered.row &gt; 0){
    hovered = btn_array[hovered.column,hovered.row - 1];
  }else{
    hovered = btn_array[hovered.column,height - 1];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

//move down
if(arrow_down){
  if (hovered.row &lt; height-1){
    hovered = btn_array[hovered.column,hovered.row + 1];
  }else{
    hovered = btn_array[hovered.column,0];
  }
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}

if(arrow_right || arrow_left || arrow_down || arrow_up){
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset shop_list Objects
/*
How this function works:
  this creates an shop_item object for each item in the inv_list of the shopkeeper
  these objects are stored in a list
*/

if (mode){
  for(i=0;i&lt;5;i+=1){
    lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
    lastcreated.row = i;
    lastcreated.column = 1;
    btn_array[1,i] = lastcreated;
    if (i+scroll_ind &gt;= ds_list_size(target_npc.shop_inv_type[shop_ind])){
      lastcreated.empty = true;
    }else{
      lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
      lastcreated.type = ds_list_find_value(target_npc.shop_inv_type[shop_ind],i+scroll_ind);
      lastcreated.stock = ds_list_find_value(target_npc.shop_inv_num[shop_ind],i+scroll_ind);
    }
  }
}else{
  for(i=0;i&lt;5;i+=1){
    lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
    lastcreated.column = i;
    lastcreated.column = 1;
    btn_array[1,i] = lastcreated;
    if (i+scroll_ind &gt;= ds_list_size(inv_list[shop_ind])){
      lastcreated.empty = true;
    }else{
      lastcreated.type = ds_list_find_value(inv_list[shop_ind],i+scroll_ind);
      if (shop_ind &lt; 2){//if the current category includes stackable items, add set stock value
        lastcreated.stock = ds_list_find_value(inv_stacks[shop_ind],i+scroll_ind);
      }else{
        lastcreated.stock = -1;//else set stock value to N/A
      }
    }
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shopping Click
var selected, shopkeeper;
shopkeeper = target_npc;
switch (hovered.column){
case 0:
  shop_ind = hovered.row;
  ds_list_clear(shop_list);
  with obj_menu_shop_item{instance_destroy();}
  scroll_ind = 0;
  event_user(0);
  break;
case 1:
  selected = ds_list_find_value(shop_list,hovered.row);
  selected_item.selected = false;
  selected_item = selected;
  selected_item.selected = true;
  break;
case 2:
  if (shop_menu.y_pos == 0){
    if (shop_menu.selected_item.object_index != obj_menu_shop_null){
      event_perform(ev_other,ev_user1);
    }
  }else{
    ds_list_clear(shop_list);
    with (obj_menu_shop_item ){instance_destroy();}
    scroll_ind = 0;
    if (shopkeeper.shop_mode){
      shopkeeper.shop_mode = false;
      shopkeeper.sell_mode = true;
      //clear shop objects and post pawn objects
      display_dlg = shop_dlg_append(target_npc.npc_dialogue[2]);
      ds_list_clear(shop_list)
      event_perform(ev_other,ev_user0);
    }else{
      shopkeeper.sell_mode = false;
      shopkeeper.shop_mode = true;
      //clear pawn objects and post shop objects
      display_dlg = shop_dlg_append(target_npc.npc_dialogue[1]);
      ds_list_clear(shop_list);
      event_perform(ev_other,ev_user0);
    }
  }
  break;
case 3:
  //done shopping
  shopkeeper.shop_mode = false;
  shopkeeper.sell_mode = false;
  with(shopkeeper){
    sound_stop(theme_song);
    sound_play(snd_lair);
    end_dialogue(id,shop_menu);
  }
  lastcreated = instance_create(shopkeeper.x-16,shopkeeper.y-16,obj_fltext);
  lastcreated.text = "Come Back Anytime...";
  lastcreated.alarm[0] = 2*room_speed;
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
description_page = 1;   //current page of item description
scroll_ind = 0;
shop_ind = 0;           //shop_ind + y_pos = item_id
display_dlg = ds_list_create(); //stores lines of shopkeeper dialogue
display_description = ds_list_create(); // stores lines of item description
shop_list = ds_list_create(); //stores item_objects

//dimension specs
text_h = 12;    // displayed font height
char_w = 4;     //avg. width of a character in the displayed font
top_w = 288;        //width in pixels of the top box
top_lnum = (288)div(text_h);    //# of lines that will fit in the top box
bot_w = 288;      //width in pixels of the bottom box
bot_lnum = (264)div(text_h);  //# of lines that will fit in the bottom box

width = 4;
height = 5;

btn_labels[0] = "Treasure"
btn_labels[1] = "Useable";
btn_labels[2] = "Weapon";
btn_labels[3] = "Armor";
btn_labels[4] = "Other";
btn_labels[5] = "Cancel";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Menu Objects
//create buttons
for(i=0;i&lt;height;i+=1){
  lastcreated = instance_create(x+48,y+128+i*32,obj_btn);
  lastcreated.text = btn_labels[i];
  lastcreated.column = 0;
  lastcreated.row = i;
  lastcreated.btn_index = i;
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  btn_array[0,i] = lastcreated;
}

//Create Item Slots
if (mode){//if buying
  for(i=0;i&lt;height;i+=1){
    lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
    lastcreated.row = i;
    lastcreated.column = 1;
    btn_array[1,i] = lastcreated;
    lastcreated.border_sprite = spr_selection_96x32;
    if (i+scroll_ind &gt;= ds_list_size(target_npc.shop_inv_type[shop_ind])){
      lastcreated.empty = true;
    }else{
      lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
      lastcreated.type = ds_list_find_value(target_npc.shop_inv_type[shop_ind],i+scroll_ind);
      lastcreated.stock = ds_list_find_value(target_npc.shop_inv_num[shop_ind],i+scroll_ind);
    }
  }
}else{//if selling
  for(i=0;i&lt;height;i+=1){
    lastcreated = instance_create(x+192,y+120+i*96,obj_btn);
    lastcreated.row = i;
    lastcreated.column = 1;
    btn_array[1,i] = lastcreated;
    lastcreated.border_sprite = spr_selection_96x32;
    if (i+scroll_ind &gt;= ds_list_size(inv_list[shop_ind])){
      lastcreated.empty = true;
    }else{
      lastcreated.type = ds_list_find_value(inv_list[shop_ind],i+scroll_ind);
      lastcreated.sprite_index = item_icons[shop_ind];
      lastcreated.image_index = lastcreated.type;
      lastcreated.image_speed = 0; 
      if (shop_ind &lt; 2){//if the current category includes stackable items, add set stock value
        lastcreated.text = ds_list_find_value(inv_stacks[shop_ind],i+scroll_ind);
      }else{
        lastcreated.text = -1;//else set stock value to N/A
      }
    }
  }
}
//create selection and hover borders
hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;

tab_selected = btn_array[0,shop_ind];
tab_selection_border = instance_create(tab_selected.x,tab_selected.y,obj_selection);
tab_selection_border.sprite_index = tab_selected.border_sprite;
tab_selection_border.image_index = 1;
tab_selection_border.image_speed = 0;

item_selected = noone;
item_selection_border = instance_create(x,y,obj_selection);
item_selection_border.sprite_index = noone;
item_selection_border.image_index = 1;
item_selection_border.image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff

draw_self();

//draw item description
draw_set_font(font0);
draw_set_color(c_white);
if (!hovered.empty &amp;&amp; hovered.column == 1){
  draw_text_ext(x+324,y+300,item_tooltip[shop_ind,hovered.type],text_h,bot_w)
}  
//draw shopkeeper dialogue
draw_text_ext(x+324,y+300,display_dlg,text_h,top_w);

draw_text(x+480,y+558,"Quit");
if (mode){
  draw_text(x+336,y+558,"Buy It!");
  draw_text(x+336,y+606,"Switch to Pawn Menu");
}else{
  draw_text(x+336,y+558,"Sell It!");
  draw_text(x+336,y+606,"Switch to Shop Menu");
}
//draw price, title, page numbers etc.
draw_set_color(c_white);
if (!hovered.empty &amp;&amp; hovered.column == 1){
  draw_text(x+324,y+234,item_name[shop_ind,hovered.type]);
  if (mode){
    draw_text(x+528,y+234,"Price: "+string(item_price[shop_ind,hovered.type])+ " Gold");
    draw_text(x+144,y+609,"Items "+string(scroll_ind+ds_list_size(shop_list))+"/"+string(ds_list_size(target_npc.shop_inv_type[shop_ind])));
  }else{
    draw_text(x+528,y+234,"Sells for: "+string(item_price[shop_ind,hovered.type] div 2)+ " Gold");
    draw_text(x+144,y+609,"Items "+string(scroll_ind+ds_list_size(shop_list))+"/"+string(ds_list_size(inv_list[shop_ind])));
  }
}
draw_set_color(c_black);
draw_text(x+336,y+519,"Current Funds: "+string(gold));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
