<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_ally_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
npcid = npc_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Dialogue Variables
npc_dialogue[0] = "Say brotha', would you kindly lend a hand to fellow gnoll in great distress?";
npc_dialogue[0] = "I seem to have misplaced a certain, um, pillow. Would you go get it for me?";
npc_dialogue[0] = "Hey! So I lost my pillow? It could've happened to anybody! It doesn't automatically make me some kind of supreme loser! Come on man, I really need this pillow...";
npc_dialogue[0] = "Come on! All I'm asking is that you go back in the woods where I'm too scared to go and get back my personal comfort item! Is that so wrong?! Its not like I'm trying to lure you into a trap or something, Geez!";

pc_dialogue[0] = "Um.... No.";
pc_dialogue[0] = "No";
pc_dialogue[0] = "Sure thing pal, what is it?";
pc_dialogue[0] = "*snarl* This had better be good";
pc_dialogue[0] = "Um, I just remembered I have to go somewhere really far away. Bye.";
pc_dialogue[0] = "You what?!";
pc_dialogue[0] = "Ok, one, I don't give a crap about your pillow. Two, you lost it, you find it. Three, I don't even know who you are, and four, How could anyone manage to lose A PILLOW!?";
pc_dialogue[0] = "Find your own sweaty pillow, meatball.";
pc_dialogue[0] = "...";
pc_dialogue[0] = "Sure, whatever. For the right price, I'll find your toothbrush too";
pc_dialogue[0] = "Looks like today's your lucky day! Just fork over the cash and I'll be back with your midding thing.";
pc_dialogue[0] = "...?";
pc_dialogue[0] = "So...How did you lose your pillow again?";
pc_dialogue[0] = "What did you say?";
pc_dialogue[0] = "Actually, it kind of does.";
pc_dialogue[0] = "You forgot to mention the part where you stand around pleading with random strangers to recover the gross personal item you lost through overwhelming force of stupid.";
pc_dialogue[0] = "I can't wait to hear the explanation for this one.";
pc_dialogue[0] = "So let me get this straight: You were walking around in the jungle, carrying your pillow, and you just left it there? And now you want ME to get it back for you?";
pc_dialogue[0] = "So buy a new one.";
pc_dialogue[0] = "Ok. Its official. You're retarded";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
npc_name = "Jeegarak"
conversing = false;
talking = false;

dlg_log = ds_list_create();
dlg_opts = ds_list_create();
dlg_opt_ids = ds_list_create();
hitpoints = 5;
spd = 3;
dir = 270;
npcdef = 1;
npcdefmod = 0;
knockable = true;
snared = false;
stunned = false;
stealthed = false;

//graphics
spr_ind = 1;
portrait = spr_npcportrait_jeegarak;
portrait_emotion = 0;
frame_num = 2;
portrait_ind = 2;
icon = spr_brgnoll_icon;
image_speed = 0;

//conversation
dlg_over = false;
talk_i = 0;
talk_j = 0;
talk_spd = 2;
talk_char = '';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up dialogue
end_dialogue(id,dlg_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite stuff

if xprevious != x &amp;&amp; yprevious != y // if moving, have sprite move, else stop
    {
    if image_speed == 0
        {
        image_index += 1;
        image_speed = 0.25;
        }
    dir = point_direction(xprevious,yprevious,x,y)
    }
else
    {
    image_speed = 0;
    }
//align sprite to direction
switch ((dir+22.5) div 45)
    {
    case 0:
        sprite_index = sprEE[spr_ind];
        break;
        
    case 1:
        sprite_index = sprNE[spr_ind];
        break;
        
    case 2:
        sprite_index = sprNN[spr_ind];
        break;
        
    case 3:
        sprite_index = sprNW[spr_ind];
        break;
        
    case 4:
        sprite_index = sprWW[spr_ind];
        break;
        
    case 5:
        sprite_index = sprSW[spr_ind];
        break;
        
    case 6:
        sprite_index = sprSS[spr_ind];
        break;
        
    case 7:
        sprite_index = sprSE[spr_ind];
        break;
        
    case 8:
        sprite_index = sprEE[spr_ind];
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Conversation

//look at speaker
dir = point_direction(x,y,ds_list_find_value(dlg_menu.participants,0).x,ds_list_find_value(dlg_menu.participants,0).y);

//determine opening phrase
ds_list_copy(dlg_log,dialogue_log_append(npc_dialogue[0]));
log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
//determine starting options
ds_list_clear(dlg_opts);
ds_list_add(dlg_opts,pc_dialogue[0]);
ds_list_add(dlg_opts,pc_dialogue[1]);
ds_list_add(dlg_opts,pc_dialogue[2]);
//assign retrieval keys
ds_list_clear(dlg_opt_ids);
ds_list_add(dlg_opt_ids,0);
ds_list_add(dlg_opt_ids,1);
ds_list_add(dlg_opt_ids,2);

talking = true;
talk_spd = 2;
ds_list_clear(dlg_menu.display_log);
ds_list_add(dlg_menu.display_log,"");
alarm[1] = talk_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialogue Click
//Check if this NPC is in a conversation
if conversing == true
    {
    if (dlg_menu.position_x == 0) &amp;&amp; (talking == false) &amp;&amp; !(dlg_over)
        {
        talking = true;
        ds_list_clear(dlg_menu.display_log);
        ds_list_add(dlg_menu.display_log,"");
        dlg_menu.log_ind = 0;
        dlg_menu.log_page = 1;
        switch(ds_list_find_value(dlg_opt_ids,dlg_menu.hovered.key))
            {
            case 0:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[1]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 1:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[2]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 2:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[3]);
                //end dialogue
                ds_list_clear(dlg_opts);
                talking = true;
                dlg_over = true;
                break;
            
            case 3:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[4]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 4:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[5]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 5:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[0]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[0]);
                ds_list_add(dlg_opts,pc_dialogue[1]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,0);
                ds_list_add(dlg_opt_ids,1);
                ds_list_add(dlg_opt_ids,2);
                break;
            }
        log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
        alarm[1] = talk_spd;
        with dlg_menu
            {
            ds_list_clear(option_objects);
            with obj_menu_dlg_option
                {
                instance_destroy();
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
