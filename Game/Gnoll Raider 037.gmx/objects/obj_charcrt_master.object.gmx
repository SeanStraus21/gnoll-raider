<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive messages from the slaves

while (true)
    {
    // Initalise local variables for storing the packet id and size
    var packet;

    // Otherwise read the message
    packet = readbyte();

    // Use the packet id to decide how to handle the message
    // inside a switch statement

        // A connection has been closed with a client
    if packet == SLAVE_DROP
        {
        sid = readbyte();
        i = sid   //sid is the pnum of dropped slave, say 2
        while i &lt; cjp   //for instance, less than 4, [IDs 2-3]
            {
            if i != cjp-1 
            //this way if pnum[2] drops, player 3(4-1=3) 
                {
                pname[i] = pname[i+1]
                pslot[i] = pslot[i+1] //pslot[1] = pslot[2]
                socket[i] = socket[i+1]
                ready[i] = ready[i+1]
                mu_spr[i] = mu_spr[i+1]
                mu_icon[i] = mu_icon[i+1]
                mu_mhp[i] = mu_mhp[i+1]
                mu_hp[i] = mu_mhp[i]
                mu_mep[i] = mu_mep[i+1]
                mu_ep[i] = mu_mep[i]
                //ptext[i] = ptext[i+1]
                }
            else
                {
                pname[i] = ''
                socket[i] = 0
                ready[i] = false
                //ptext[i] = ''
                }
            i += 1;  
            }
        cjp -= 1;
        cjpincreased = true
        break;
        }
            


    //new player has been accepted
    if packet == SLAVE_ID
        {
        // Get the multiplayer id of the object and strings
        sid = readbyte();
        pname[sid] = readstring()
        //pslot[sid] = readint()
        cjpincreased = true
        break;
        }

          
    if packet == SLAVE_INFO
        {
        // update text and position. maybe set something up in case of conflicts
        sid = readbyte();
        pslot[sid] = readint();
        ready[sid] = readbyte();
        pname[sid] = readstring();
        mu_spr[sid] = readbyte();
        mu_icon[sid] = readbyte();
        mu_mhp[sid] = readint();
        mu_hp[sid] = mu_mhp[sid];
        mu_mep[sid] = readint();
        mu_ep[sid] = mu_mep[sid];
        //ptext[i] = readstring();
        cjpincreased = true;
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///send information to currently joined players
/*
these are the things the master needs to tell the players
his texts
the names of the other players
the numbers of the other players
*/

if cjp &gt; 1
    {
    if cjpincreased = true
        {
        clearbuffer();
        writebyte(MLOBBY_ID);
        writeint(cjp);
        i = 0;
        while i &lt; cjp
            {
            writeint(pnum[i]);
            writeint(pslot[i]);
            writebyte(ready[i]);
            writestring(pname[i]);
            writebyte(mu_spr[i]);
            writebyte(mu_icon[i]);
            writeint(mu_mhp[i]);
            writeint(mu_mep[i]);
            //writestring(textmessage[i])
            //playerarray[i] = pnum[i],pname[i], etc.
            i += 1;
            }
        slave_sendall();
        cjpincreased = false;
        }
    }

/* English Translation:
    if cjp is greater than 1, that is, if someone has joined the game, then continue.
        if currently joined players have increased...
        write a message and write the new stats:
        i = 0
    while i is less than the number of players (say 2)
    loop0{
        writeint(pnum0)
        writestring(pname0)        
        }
      and so on. well, this script checks out.        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///broadcast to computers on network the presence of an available game
if(cjp &lt; 8){
  event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///master drop

clearbuffer();
writebyte(MASTER_DROP);
slave_sendall();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
