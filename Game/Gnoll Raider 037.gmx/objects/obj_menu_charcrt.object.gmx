<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Constants

//Define Dimensions
btn_count = 3;

height = 1;
width = 3;

//set to square settings
for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}

btn_labels[0] = "CANCEL"
btn_labels[1] = "BACK";
btn_labels[2] = "NEXT";

//define step chart constants
step_count = 7;
crnt_step = 1;

step_labels[1] = "Class";
step_labels[2] = "Aesthetics";
//step_labels[7] = "Attributes";
step_labels[3] = "Traits";
step_labels[4] = "Skills"
step_labels[5] = "Abilities";
step_labels[6] = "Name";
step_labels[7] = "Create";

//Populate Panel Array
panel[1] = obj_charcrtpanel_class;
panel[2] = obj_charcrtpanel_aesthetics;
//panel[7] = obj_charcrtpanel_attributes;
panel[3] = obj_charcrtpanel_traits;
panel[4] = obj_charcrtpanel_skills;
panel[5] = obj_charcrtpanel_abilities;
panel[6] = obj_charcrtpanel_name;
///Initialization



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Default Character Settings

crnt_lvl = 1;
charcrt_name = '';
charcrt_class = -1;
charcrt_sprite = 0;
charcrt_icon = 0;
charcrt_mhp = 45;
charcrt_mep = 36;
charcrt_atk = wpnatk[0]
charcrt_atkspd = wpnatkspd[0]
charcrt_rng = wpnrng[0]
charcrt_def = 0;
charcrt_spd = 5;
charcrt_weapon = 0;

trait_count = 12;
for(i=0;i&lt;trait_count;i+=1){
  charcrt_trait[i] = false
}
for(i=0;i&lt;ds_list_size(skill_list);i+=1){
  skl_lvl[i] = -1;
}
for(i=0;i&lt;ds_list_size(ability_list);i+=1){
  abl_lvl[i] = -1;
}
for(i=0;i&lt;8;i+=1){
  abl_slot[i] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Character Creation Menu
active = true;

//create textbox for showing statistics
textbox = instance_create(x+288,y+192,obj_btn);
textbox.sprite_index = spr_textbox_112x32;
textbox.depth = depth-1;

//create preview box
previewbox = instance_create(x+96,y+192,obj_btn);
previewbox.sprite_index = spr_textbox_112x32;
previewbox.depth = depth-1;

//create buttons
for(i=0;i&lt;btn_count;i+=1){
  lastcreated = instance_create(x+288+i*96,y+256+5*32,obj_btn);
  lastcreated.text = btn_labels[i];
  lastcreated.btn_column = i mod width;
  lastcreated.btn_row = i div width;
  lastcreated.btn_index = i;
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.depth = depth-1;
  btn_array[i mod width,i div width] = lastcreated;
}

//create progress chart
for(i=1;i&lt;=step_count;i+=1){
  lastcreated = instance_create(x+576,y+256+i*32,obj_btn);
  lastcreated.text = step_labels[i];
  lastcreated.btn_index = i+btn_count-1;
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.depth = depth-1;
  btn_array[2,i] = lastcreated;
}

//create selection and hover borders
hovered = btn_array[2,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
hover_border.depth = depth-2;

selected = btn_array[2,crnt_step];
selection_border = instance_create(selected.x,selected.y,obj_selection);
selection_border.sprite_index = selected.border_sprite;
selection_border.image_index = 1;
selection_border.image_speed = 0;
selection_border.depth = depth-2;

//create the first panel
io_clear2();
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input
if(active){
  if(confirm_btn){
    event_user(1);//press enter
    io_clear2();
  }else{
    if(arrow_left){//move left
      if (hovered.btn_column &gt; 0){
        hovered = btn_array[hovered.btn_column - 1,hovered.btn_row];
      }else{
        hovered = btn_array[row_width[hovered.btn_column]-1,hovered.btn_row];
      }
      hover_border.sprite_index = hovered.border_sprite;
      hover_border.x = hovered.x;
      hover_border.y = hovered.y;
      io_clear2();
    }
    if(arrow_right){
      //for dealing with objects that take up multiple slots //while hovered is the same as the next thing
      checked = btn_array[(hovered.btn_column + 1) mod (row_width[hovered.btn_row]),hovered.btn_row];
      for(i=2; i&lt;row_width[hovered.btn_row] &amp;&amp; hovered == checked;i+=1){
        checked = btn_array[(hovered.btn_column + i) mod (row_width[hovered.btn_row]),hovered.btn_row];
      }
      hovered = checked;
      hover_border.sprite_index = hovered.border_sprite;
      hover_border.x = hovered.x;
      hover_border.y = hovered.y;
      io_clear2();
    }
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Selection
selected = btn_array[2,crnt_step];
selection_border.x = selected.x;
selection_border.y = selected.y;
selection_border.sprite_index = selected.border_sprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Popup Window Results
switch(return_from){
case 0:
  break;
case 1:
  if (answer){
    room_goto(room_charactermain);
  }
  break;
case 2:
  break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Press Menu Button
switch(hovered.btn_column){
case 0://Cancel
  answer = show_question_menu("You will lose all settings for this character. Are you sure you want to do this?");
  return_from = 1;
  break;
case 1://Back
  if(crnt_step &gt; 1){
    crnt_step -= 1;
    selected = btn_array[2,crnt_step];
    selection_border.x = selected.x;
    selection_border.y = selected.y;
    selection_border.sprite_index = selected.border_sprite;
  }else{
    answer = show_question_menu("You will lose all settings for this character. Are you sure you want to do this?");
    return_from = 1;
  }
  break;
case 2://Next
  if(crnt_step &lt; step_count){
    //create next panel
    event_user(0);
  }else{
    //write the variables to global variables &amp;&amp; save the game 
    character_initialization();
    //if a multiplayer game, send messages to each other
    switch(global.roomprevious){
    case room_mainmenu:
      //start the game
      start_game();
      break;
      
    case room_charactermain:
      room_goto(room_charactermain);
      break;
      
    case room_lobby:
      if (!global.master){//if slave
        ready[crnt_pnum] = true;

        clearbuffer();
        writebyte(SLAVE_INFO);
        writebyte(crnt_pnum);
        writeint(pslot[crnt_pnum]);
        writebyte(ready[crnt_pnum]);
        writestring(pname[crnt_pnum]);
        writebyte(mu_spr[crnt_pnum]);
        writebyte(mu_icon[crnt_pnum]);
        writeint(mu_mhp[crnt_pnum]);
        writeint(mu_mep[crnt_pnum]);
        sendmessage(server);
        room_goto(room_lobby)
      }else{ //if master
        ready[crnt_pnum] = true;
        clearbuffer();
        writebyte(MLOBBY_ID);
        writeint(cjp);
        for(i=0;i&lt;cjp;i+=1){
          writeint(pnum[i]);
          writeint(pslot[i]);
          writebyte(ready[i]);
          writestring(pname[i]);
          writebyte(mu_spr[i]);
          writebyte(mu_icon[i]);
          writeint(mu_mhp[i]);
          writeint(mu_mep[i]);
        }
        slave_sendall();
        room_goto(room_lobby);
      }
      break;
    }
  }
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Panel
io_clear2();
active = false;
crnt_panel = instance_create(x+64,y+128,panel[crnt_step]);
crnt_panel.root = id;
with (crnt_panel){
  event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw texts &amp; graphics
draw_set_font(font0);
draw_set_color(c_white);

draw_self();
//draw stats


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
