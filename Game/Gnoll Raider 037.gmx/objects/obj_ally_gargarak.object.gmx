<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_ally_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
npcid = npc_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Dialogue Variables
plrl_0[0] = "you're"; plrl_0[1] = "you guys are";
plrl_1[0] = "I"; plrl_1[1] = "we";
plrl_2[0] = "me"; plrl_2[1] = "us";
plrl_3[0] = "fatty"; plrl_3[1] = "fatties";
npc_dialogue[0] = "We've got a problem, a BIG problem. Its almost time for the annual Great Thanksgiving Feast, and we're chuck outta food! We ain't got a lump o' lard to our names, let alone a Prize Turkey. As of me telling you to,"+plrl_0[plrl]+"on turkey hunting duty. good luck!";
npc_dialogue[1] = "Better get to it! The Feast is comin' in hard! The fate of our main course is in your hands! Good luck!";
npc_dialogue[2] = "Wait, aren't you the guys who got the turkey last year? Oh, wait, that was Jeegarak. Hm, well, I don't really know. You could ask around I guess, but I'm more of a turkey cooker than a turkey hunter. I think I remember someone saying turkeys are supposed to like woods and stuff.";
npc_dialogue[3] = "What d'ye think happened to it, ya little "+plrl_3[plrl]+"? All you lard barrels been sittin' around sucking the food outta this place for the last few months, and now its your chance to give a little back.";
npc_dialogue[4] = "What, you got somethin' better to do? The rest of us have big important officer type stuff to do. You guys, though, you're young, you're idle, and you're easy to boss around. Ergo, its your job to do all the tedious, mundane, and hazardous work that the rest of us are too busy and important for. Like catching turkeys";
npc_dialogue[5] = "Ho Ho! What have we here? The Little Columbus wants to split hairs over geography! Sorry bub, ye ain't gettin' out of it that easy. Well as a matter of fact, we've had a big thanksgiving turkey dinner every year since this place was built, in case you forgot. Stuff THAT one down your telescope, Magellan!";
npc_dialogue[6] = "What's in it fer you!? How about not starving to death? How about not gettin' your hide tanned? Chucklin' Blubber! Kids these days gotta have everything spelled out for em', wouldn't know a tactical advantage if it bit'em in the face!";
npc_dialogue[7] = "";
npc_dialogue[8] = "";
npc_dialogue[9] = "";
npc_dialogue[10] = "Gar, what is it?";
npc_dialogue[11] = "Well flick my fat! You don't remember old Gargarak? Who did you bl";
npc_dialogue[12] = "Well Butter my butt and call me a biscuit! You already got the turkeys?";
npc_dialogue[13] = "Blistering Blubber! Is that your idea of a threat? This ain't the kind of game where ye can git away with bullyin' the npcs into givin up their loot! If you're lookin' to mug someone, go mug someone like an honest gnoll, not by whining like a human! As a matter of fact, with an attitude like that, I've got a mind to cut your wages!";
npc_dialogue[14] = "Sufferin' Smidgens! ";
npc_dialogue[15] = "Aye! And a good thing too!";
npc_dialogue[16] = "Why I'll eat my cooking if that ain't my old turkey grubbing boys!"
npc_dialogue[17] = "Flap my flubber and lick me lard.";
npc_dialogue[18] = "Listen chuckles, you ain't seen mad.";

pc_dialogue[0] = "Alright, Those old fatties won't know what hit em'!";
pc_dialogue[1] = "Sure, okay. Where do the turkeys live again?";
pc_dialogue[2] = "Wait, what do you mean we're out of food? what happened to all the backup reserves and stuff?";
pc_dialogue[3] = "Hey, why do "+plrl_1[plrl]+" have to do it?";
pc_dialogue[4] = "Um, aren't we hyenas? shouldn't we be hunting antelope carcasses or something? Because, last time I checked, Thanksgiving and turkeys and all that were kind of out of our hemisphere.";
pc_dialogue[5] = "What's in it for "+plrl_2[plrl]+"?";
pc_dialogue[6] = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
npc_name = "Gargarak"
conversing = false;
talking = false;

dlg_log = ds_list_create();
dlg_opts = ds_list_create();
dlg_opt_ids = ds_list_create();
hitpoints = 5;
spd = 3;
dir = 270;
npcdef = 1;
npcdefmod = 0;
knockable = true;
snared = false;
stunned = false;
stealthed = false;

//graphics
spr_ind = 1;
portrait = spr_npcportrait_jeegarak;
portrait_emotion = 0;
frame_num = 2;
portrait_ind = 2;
icon = spr_brgnoll_icon;
image_speed = 0;

//conversation
plrl = 0+(cjp&gt;1);
//gndr = 0;
dlg_over = false;
talk_i = 0;
talk_j = 0;
talk_spd = 2;
talk_char = '';

if (ds_list_find_value(cinematics,1))
    {
    visible = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up dialogue
end_dialogue(id,dlg_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite stuff

if xprevious != x &amp;&amp; yprevious != y // if moving, have sprite move, else stop
    {
    if image_speed == 0
        {
        image_index += 1;
        image_speed = 0.25;
        }
    dir = point_direction(xprevious,yprevious,x,y)
    }
else
    {
    image_speed = 0;
    }
//align sprite to direction
switch ((dir+22.5) div 45)
    {
    case 0:
        sprite_index = sprEE[spr_ind];
        break;
        
    case 1:
        sprite_index = sprNE[spr_ind];
        break;
        
    case 2:
        sprite_index = sprNN[spr_ind];
        break;
        
    case 3:
        sprite_index = sprNW[spr_ind];
        break;
        
    case 4:
        sprite_index = sprWW[spr_ind];
        break;
        
    case 5:
        sprite_index = sprSW[spr_ind];
        break;
        
    case 6:
        sprite_index = sprSS[spr_ind];
        break;
        
    case 7:
        sprite_index = sprSE[spr_ind];
        break;
        
    case 8:
        sprite_index = sprEE[spr_ind];
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Conversation

//look at speaker
dir = point_direction(x,y,ds_list_find_value(dlg_menu.participants,0).x,ds_list_find_value(dlg_menu.participants,0).y);

//determine opening phrase
ds_list_copy(dlg_log,dialogue_log_append(npc_dialogue[0]));
log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
//determine starting options
ds_list_clear(dlg_opts);
ds_list_add(dlg_opts,pc_dialogue[0]);
ds_list_add(dlg_opts,pc_dialogue[1]);
ds_list_add(dlg_opts,pc_dialogue[2]);
//assign retrieval keys
ds_list_clear(dlg_opt_ids);
ds_list_add(dlg_opt_ids,0);
ds_list_add(dlg_opt_ids,1);
ds_list_add(dlg_opt_ids,2);

talking = true;
talk_spd = 2;
ds_list_clear(dlg_menu.display_log);
ds_list_add(dlg_menu.display_log,"");
alarm[1] = talk_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialogue Click
//Check if this NPC is in a conversation
if conversing == true
    {
    if (dlg_menu.position_x == 0) &amp;&amp; (talking == false) &amp;&amp; !(dlg_over)
        {
        talking = true;
        ds_list_clear(dlg_menu.display_log);
        ds_list_add(dlg_menu.display_log,"");
        dlg_menu.log_ind = 0;
        dlg_menu.log_page = 1;
        switch(ds_list_find_value(dlg_opt_ids,dlg_menu.hovered.key))
            {
            case 0:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[1]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 1:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[2]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 2:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[3]);
                //end dialogue
                ds_list_clear(dlg_opts);
                talking = true;
                dlg_over = true;
                break;
            
            case 3:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[4]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 4:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[5]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 5:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[0]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[0]);
                ds_list_add(dlg_opts,pc_dialogue[1]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,0);
                ds_list_add(dlg_opt_ids,1);
                ds_list_add(dlg_opt_ids,2);
                break;
            }
        log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
        alarm[1] = talk_spd;
        with dlg_menu
            {
            ds_list_clear(option_objects);
            with obj_menu_dlg_option
                {
                instance_destroy();
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
