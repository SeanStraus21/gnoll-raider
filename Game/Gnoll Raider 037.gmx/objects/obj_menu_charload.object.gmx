<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Menu
active = true;
pageind = 0;
column = 1;

selection = 0;

slot_count = 5;
for(i=0;i&lt;slot_count;i+=1){
  lastcreated = instance_create(x+96,(y+128+16+96*i),obj_loadslot);
  lastcreated.num = i;
  lastcreated.slot_index = i;
  lastcreated.root = id;
  load_slot[i] = lastcreated;
} 

btn_count = 3;
btn_labels[0] = "Load";
btn_labels[1] = "Cancel";
btn_labels[2] = "";

for(i=0;i&lt;btn_count;i+=1){
  lastcreated = instance_create(384,128+16+i*64,obj_btn);
  lastcreated.btn_index = i;
  lastcreated.text = btn_labels[i];
  load_btn[i] = lastcreated;
}

hovered = load_btn[0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = spr_selection_96x32;
hover_border.image_index = 0;
hover_border.image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retrieve Character Headers
header_count = 0;
i = 0;
if (directory_exists(working_directory+"\profiles")){
  header_file = file_find_first(working_directory+"\profiles\header*.txt",0);
  if (header_file != ""){
    crnt_file = file_text_open_read(working_directory+"\profiles\"+header_file);
    
    loadname[0] = file_text_read_string(crnt_file);
    file_text_readln(crnt_file);
    loadsprite[0] = file_text_read_real(crnt_file);
    file_text_open_read(crnt_file);
    loadlvl[0] = file_text_read_string(crnt_file);
    file_text_readln(crnt_file);
    loadgold[0] = file_text_read_real(crnt_file);
    file_text_close(crnt_file);
    i = 1;
    while (true){
      header_file = file_find_next();
      if (header_file != ""){
        crnt_file = file_text_open_read(header_file);
        if(crnt_file == -1){exit;}
        loadname[i] = file_text_read_string(crnt_file);
        file_text_readln(crnt_file);
        loadsprite[i] = file_text_read_real(crnt_file);
        file_text_open_read(crnt_file);
        loadlvl[i] = file_text_read_string(crnt_file);
        file_text_readln(crnt_file);
        loadgold[i] = file_text_read_real(crnt_file);
        file_text_close(crnt_file);
        i += 1;
      }else{
        file_find_close();
        header_count = i;
        break;
      }
    }
  }else{
    show_message_menu('There are no saved characters, returning to character menu...');
    return_from = 1;
  }
}else{
  show_message_menu("There are no saved characters, returning to character menu! working directory: " + working_directory);
  return_from = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press button/select
if(!active){
  exit;
}
if(confirm_btn){
  event_user(1);
  io_clear2();
}

if(arrow_up){
  ///Move Up
  switch(column){
    case 0:
      if (hovered.slot_index &gt; 0){
        hovered = load_slot[hovered.slot_index-1];
      }else{
        if(pageind &gt; 0){
          pageind -= 1;
          with (obj_loadslot){
            num -=1;
          }
        }
      }
      break;
    case 1:
      if (hovered.btn_index != 0){
        hovered = load_btn[hovered.btn_index - 1];//move up one
      }else{
        hovered = load_btn[btn_count - 1];//go to bottom
      }
      break;
  }
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
  io_clear2();
}

if(arrow_down){
  ///Move Down
  switch(column){
    case 0:
      if(hovered.slot_index != (slot_count-1)){
        hovered = load_slot[hovered.slot_index+1];
      }else{
        if (pageind &lt; header_count-(slot_count-1)){
          pageind += 1;
          with (obj_loadslot){
            num +=1;
          }
        }
      }
      break;
    case 1:
      if (hovered.btn_index != btn_count-1){
        hovered = load_btn[hovered.btn_index + 1];//move up one
      }else{
        hovered = load_btn[0];//go to bottom
      }
      break;
  }
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
  io_clear2();
}

if(arrow_left){
  event_user(0);
  io_clear2();
}

if(arrow_right){
  event_user(0);
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Popup Window Results
switch(return_from){
case 0:
  
  break;
case 1:
  room_goto(room_charactermain);
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (column == 0){
  if (hovered.num = pageind + hovered.slot_index &amp;&amp; hovered.num &lt; header_count){
    selection = hovered.num;
  }
}else{
  switch(hovered.btn_index){
  case 0:
    //load
    if (load_game(string(loadname[selection])+'.txt') == 1){
      switch(global.roomprevious){
      case (room_mainmenu):
        //start the game
        start_game();
        break;
      case (room_charactermain):
        room_goto(room_charactermain)
        break;
      case (room_lobby):
        if (global.master){//master load
          ready[crnt_pnum] = true;
          clearbuffer();
          writebyte(MLOBBY_ID);
          writeint(cjp);
          for(i=0;i&lt;cjp;i+=1){
            writeint(pnum[i]);
            writeint(pslot[i]);
            writebyte(ready[i]);
            writestring(pname[i]);
            writebyte(mu_spr[i]);
            writebyte(mu_icon[i]);
            writeint(mu_mhp[i]);
            writeint(mu_mep[i]);
          }
          slave_sendall();
          room_goto(room_lobby);
        }else{//slave load
          ready[crnt_pnum] = true;
          clearbuffer();
          writebyte(SLAVE_INFO);
          writebyte(crnt_pnum);
          writeint(pslot[crnt_pnum]);
          writebyte(ready[crnt_pnum]);
          writestring(pname[crnt_pnum]);
          writebyte(mu_spr[crnt_pnum]);
          writebyte(mu_icon[crnt_pnum]);
          writeint(mu_mhp[crnt_pnum]);
          writeint(mu_mep[crnt_pnum]);
          sendmessage(server);
          room_goto(room_lobby);
        }
        break;
      }
    }else{
      show_message_menu("file not found");
      return_from = 0;
    }
    break;
  case 1://cancel
    if (global.roomprevious != room_mainmenu){
      room_goto(room_charactermain);
    }else{
      room_goto(room_mainmenu);
    }
    break;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Column
column = !column;
if(column == 1){
  hovered = load_btn[0];
  hover_border.sprite_index = spr_selection_96x32;
}else{
  hovered = load_slot[0];
  hover_border.sprite_index = spr_selection_256x96;
}
hover_border.x = hovered.x;
hover_border.y = hovered.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
