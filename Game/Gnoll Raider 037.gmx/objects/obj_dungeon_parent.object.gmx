<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_abstract_chamber{
    instance_destroy();
}
with obj_abstract_door{
    instance_destroy();
}
with obj_cell_parent{
    instance_destroy();
}
with tileset{
    instance_destroy();
}
tile_layer_delete(2);

ds_list_destroy(chamber_list);
ds_list_destroy(door_list);

ds_list_destroy(npc_type_list_ground_small);
ds_list_destroy(npc_type_list_ground_medium);
ds_list_destroy(npc_type_list_ground_large);
ds_list_destroy(npc_type_list_air_small);
ds_list_destroy(npc_type_list_air_medium);
ds_list_destroy(npc_type_list_air_large);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit Room
with (destined_chamber){
  var l,crnt_npc;
  l = ds_list_size(npc_list);
  for(i=l-1;i&gt;=0;i-=1){
    crnt_npc = npc_list[|i];
    if (instance_exists(crnt_npc.manifestation)){
      crnt_npc.npc_x = crnt_npc.manifestation.x;
      crnt_npc.npc_y = crnt_npc.manifestation.y;
      crnt_npc.npc_hp = crnt_npc.manifestation.hitpoints;
      with (crnt_npc.manifestation){instance_destroy();}
    }else{
      ds_list_delete(npc_list,i);
    }
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter Room

background_color = tileset.tileset_color;

with destined_chamber{
  var l,cell;

  //clear the spot
  with obj_cell_parent{
    instance_destroy();
  }
  with obj_npc_parent{
    instance_destroy();
  }
  npcid_index = 0; //start a new array of npcs
  //tile_layer_delete(2); //destroy all dungeon tiles
  
  //if the chamber hasn't been generated already, generate it.
  if (!is_defined){
      is_defined = true;
      generate_chamber();
  }
  //create the chamber cells
  l = ds_list_size(cell_list);
  for(i=0;i&lt;l;i+=1){
    cell = ds_list_find_value(cell_list,i);
    lastcreated = instance_create(cell.cell_x,cell.cell_y,cell.cell_type);
    lastcreated.tileset = tileset;
    //lastcreated.cell_index = cell.cell_index;
    lastcreated.abstract = cell;
    cell.manifestation = lastcreated;
  }
  //after all cells have been created, call constructors
  for(i=0;i&lt;l;i+=1){
    cell = ds_list_find_value(cell_list,i);
    lastcreated = cell.manifestation;
    with (lastcreated){event_user(0);}
  }
  if (global.master){
    //create npcs
    l = ds_list_size(npc_list);
    for(i=0;i&lt;l;i+=1){
      npc = ds_list_find_value(npc_list,i);
      lastcreated = instance_create(npc.npc_x,npc.npc_y,npc.npc_type);
      if(npc.npc_hp &gt; 0){
        lastcreated.hitpoints = npc.npc_hp;
      }
      lastcreated.abstract = npc;
      npc.manifestation = lastcreated;
      with (lastcreated){event_user(0);}
    }
  }
}
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
