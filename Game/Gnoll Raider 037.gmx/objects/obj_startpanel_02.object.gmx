<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menupanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up
with(textbox){
  instance_destroy();
}

with (hover_border){
  instance_destroy();
}

for(i=0;i&lt;btn_count;i+=1){
  with(btn_array[width-1, i]){
    instance_destroy();
  }
}
for(i=0;i&lt;slot_count;i+=1){
  with(btn_array[i mod (width-1), i div (width-1)]){
    instance_destroy();
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(instance_exists(obj_menu_start_item_parent)){
  if (hovered.btn_column == width-1){
    if (hovered.btn_index == slot_count+6){
      root.crnt_panel = instance_create(x,y,obj_startpanel_00);
      root.crnt_panel.root = root;
      with (root.crnt_panel){
        event_user(0);
      }
      instance_destroy();
    }else{
      tab = hovered.btn_row;
    }
  }else{
    selection = hovered.btn_index;
    if (selection &lt; ds_list_size(inv_list[tab])){
      lastcreated = instance_create(hovered.x,hovered.y,item_invobj[tab,ds_list_find_value(inv_list[tab],selection)]);
      lastcreated.slot = selection;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables

btn_count = 7;
slot_count = 28;
width = 5;
height = 7;

for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}


tab = 0;
page = 0;
text_h = 12;
win_w = 8*32;

btn_labels[0] = "Treasure";
btn_labels[1] = "Usable";
btn_labels[2] = "Weapons";
btn_labels[3] = "Armor";
btn_labels[4] = "Other";
btn_labels[5] = "Quest";
btn_labels[6] = "Back";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Buttons

textbox = instance_create(x,y,obj_btn);
textbox.sprite_index = spr_textbox_large;


for(i=0;i&lt;btn_count;i+=1){
  lastcreated = instance_create(x+528,y+120+32*(i),obj_btn);
  lastcreated.text = btn_labels[i];
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.btn_column = width - 1;
  lastcreated.btn_row = i;
  lastcreated.btn_index = slot_count + i;
  btn_array[width-1, i] = lastcreated;
}
for(i=0;i&lt;slot_count;i+=1){
  lastcreated = instance_create(x+192+48*(i mod (width-1)),y+120+48*(i div (width - 1)),obj_btn);
  lastcreated.sprite_index = spr_border_48x48;
  lastcreated.border_sprite = spr_selection_48x48;
  lastcreated.btn_column = i mod (width-1);
  lastcreated.btn_row = i div (width-1);
  lastcreated.btn_index = i;
  btn_array[i mod (width-1),i div (width-1)] = lastcreated;
}
hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_speed = 0;
hover_border.image_index = 0;

io_clear2();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Start Panel 02(Inventory)
//draw buttons





draw_set_color(c_gray);
//draw items
for(i=0;i&lt;slot_count;i+=1){
  if(i &gt;= ds_list_size(inv_list[tab])){
    break;
  }else{
    draw_sprite(item_icons[tab],ds_list_find_value(inv_list[tab],((i*4)+j)),x+240+48*(i mod (width - 1)),y+120+48*(i div width));
    if (tab &lt; 2){
      draw_text(x+240+48*(i mod width),y+120+48*(i div width),string(ds_list_find_value(inv_stacks[tab],i)));
    }
  }
}

draw_set_color(c_white);
//draw description

if (hovered.btn_column &lt; width-1 &amp;&amp; hovered.btn_index &lt; ds_list_size(inv_list[tab])){
  draw_text(x+96,y+384*SV,item_name[tab,ds_list_find_value(inv_list[tab],hovered.btn_index)]);
  draw_text_ext(x+96,y+384+16,item_tooltip[tab,ds_list_find_value(inv_list[tab],hovered.btn_index)],text_h,win_w);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
