<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrtpanel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>7</depth>
  <persistent>0</persistent>
  <parentName>obj_charcrtpanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up

with(hover_border){
  instance_destroy();
}
with(scrollbtn_up){
  instance_destroy();
}
with(scrollbtn_down){
  instance_destroy();
}
with(textbox_1){
  instance_destroy();
}
with(textbox_2){
  instance_destroy();
}
for(i=0;i&lt;height;i+=1){
  for(j=0;j&lt;width;j+=1){
    with(btn_array[j,i]){
      instance_destroy();
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input

if(confirm_btn){//press enter
  event_user(1);
  io_clear2();
}else{  //check arrowkeys
  var xpos, ypos;
  xpos = hovered.btn_column;
  ypos = hovered.btn_row;
  
  //move left
  if(arrow_left){
    if (xpos &gt; 0){
      xpos -= 1;
    }else{
      xpos = width-1;
    }
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = width-1;
        }
      }//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move right
  if(arrow_right){
    xpos = (xpos+1) mod width;
    if(xpos == width-1){
      ypos = 0;
    }else{
      for(i=xpos;btn_array[i,ypos].empty;i=(i+1)mod width){}//scroll across the row to find the next non-empty space
      xpos = i;
    }
    io_clear2();
  }
  
  //move up
  if(arrow_up){
    if (xpos == width-1 || ypos &gt; 0){
     if (ypos &gt; 0){
        ypos -= 1;
      }else{
        ypos = height-1;
      }
      for(i=ypos;btn_array[xpos,i].empty;i+=0){
        if (i &gt; 0){
          i -= 1;
        }else{
          i = height-1;
        }
      }//scroll up the column to find the next non-empty space
      ypos = i; 
    }else if(line_index &gt; 0){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll up the page
      line_index -= 1;
      scrollbtn_down.image_index = 0;
      if (line_index == 0){
        scrollbtn_up.image_index = 1;
      }
      event_user(3);
    }
    io_clear2();
  }
  
  //move down
  if(arrow_down){
    if (xpos == width-1 || ypos &lt; height-1){
     if (ypos &lt; height-1){
        ypos = (ypos+1)mod height;
        for(i=ypos;btn_array[xpos,i].empty;i=(i+1)mod height){}//scroll down the column to find the next non-empty space
        ypos = i; 
      }
    }else if(line_index &lt; ds_list_size(skill_list)-4){//xpos &lt; width-1 &amp;&amp; ypos &lt;= 0
      //scroll down the page
      line_index += 1;
      scrollbtn_up.image_index = 0;
      if (line_index == ds_list_size(skill_list)-4){
        scrollbtn_down.image_index = 1;
      }
      event_user(3);
    }
    io_clear2();
  }
  
  hovered = btn_array[xpos,ypos];
  hover_border.sprite_index = hovered.border_sprite;
  hover_border.x = hovered.x;
  hover_border.y = hovered.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create/Refresh Slots

var l, crnt_skill;
l = ds_list_size(skill_list);
for(i=0;i&lt;height;i+=1){
  if (i+line_index&lt;l){
    crnt_skill = ds_list_find_value(skill_list,i+line_index);
    for(j=0;j&lt;width-1;j+=1){
      if(j &lt; crnt_skill.upgrade_count){
        btn_array[j,i].empty = false;
        btn_array[j,i].skl_id = i+line_index;
        btn_array[j,i].skl_lvl = j;
        btn_array[j,i].icon = crnt_skill.icon;
      }else{//mark slot as empty
        btn_array[j,i].empty = true;
      }
    }
  }else{
    for(j=0;j&lt;width-1;j+=1){
      btn_array[j,i].empty = true;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create/Refresh Slots

var l, crnt_skill;
l = ds_list_size(skill_list);
for(i=0;i&lt;height;i+=1){
  if (i+line_index&lt;l){
    crnt_skill = ds_list_find_value(skill_list,i+line_index);
    for(j=0;j&lt;width-1;j+=1){
      if(j &lt; crnt_skill.upgrade_count){
        btn_array[j,i].empty = false;
        btn_array[j,i].skl_id = i+line_index;
        btn_array[j,i].skl_lvl = j;
        btn_array[j,i].icon = crnt_skill.icon;
      }else{//mark slot as empty
        btn_array[j,i].empty = true;
      }
    }
  }else{
    for(j=0;j&lt;width-1;j+=1){
      btn_array[j,i].empty = true;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Press Menu Button
var size = slot_count+1;
switch(hovered.btn_index){
case (size): //cancel
  with(root){
    event_user(3);
  }
  root.active = true;
  instance_destroy();
  break;
case (slot_count): //done
  //save confirmed results
  root.crnt_step += 1;
  root.active = true;
  with(root){
    event_user(3);
  }
  instance_destroy();
  break;
default:
  if (skl_lvl[hovered.skl_id] &lt; hovered.skl_lvl){//if the skill is not upgraded this far
    crnt_skl = ds_list_find_value(skill_list,hovered.skl_id);
    with(crnt_skl){event_user(0)};//set prerequisites
    if (crnt_skl.available[hovered.skl_lvl] &amp;&amp; skl_pts &gt;= crnt_skl.cost[hovered.skl_lvl]){//if prerequisites met and funds available
      //select the skill
      skl_pts -= crnt_skl.cost[hovered.skl_lvl];
      skl_lvl[hovered.skl_id] += 1;
      event_user(3);//refresh
    }
  }else{
    if(hovered.skl_lvl == skl_lvl[hovered.skl_id]){//if at the top of the chain
      skl_pts += crnt_skl.cost[hovered.skl_lvl];
      skl_lvl[hovered.skl_id] -= 1;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Constants

//Set Dimensions
slot_count = 12;
btn_count = 14;
width = 4;
height = 4;
//use square formation
for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}

//Set Default Values
skl_pts = 2;
line_index = 0;

var l;
l = ds_list_size(skill_list);
for(i=0;i&lt;l;i+=1){
  skl_lvl[i] = -1;
}

btn_labels[0] = "Done";
btn_labels[1] = "Cancel";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Buttons

textbox_1 = instance_create(x+64,y+64,obj_btn);
textbox_1.sprite_index = spr_border_48x48;
textbox_1.depth = depth-1;

textbox_2 = instance_create(x+384,y+64,obj_btn);
textbox_2.sprite_index = spr_border_48x48;
textbox_2.depth = depth-1;

scrollbtn_up = instance_create(x+224,y+80,obj_btn);
scrollbtn_up.sprite_index = spr_btn_arrow_up;
scrollbtn_up.image_index = 1;
scrollbtn_up.image_speed = 0;
scrollbtn_up.depth = depth-1;

scrollbtn_down = instance_create(x+224,y+384,obj_btn);
scrollbtn_down.sprite_index = spr_btn_arrow_down;
scrollbtn_down.image_index = 0;
scrollbtn_down.image_speed = 0;
scrollbtn_down.depth = depth-1;

//create slots
for(i=0;i&lt;slot_count;i+=1){
  lastcreated = instance_create(x+160+64*(i mod (width-1)),y+128+64*(i div (width-1)),obj_btn);
  lastcreated.btn_column = i mod (width-1);
  lastcreated.btn_row = i div (width-1);
  lastcreated.btn_index = i;
  lastcreated.sprite_index = spr_border_48x48;
  lastcreated.border_sprite = spr_selection_48x48;
  lastcreated.depth = depth-1;
  btn_array[i mod (width-1), i div (width-1)] = lastcreated;
}

event_user(3);

//Create Buttons

for(i=0;i&lt;height;i+=1){
  lastcreated = instance_create(x+48,y+288+(32*i),obj_btn);
  lastcreated.btn_column = width-1;
  lastcreated.btn_row = i;
  btn_array[width-1, i] = lastcreated;
  lastcreated.btn_index = i+slot_count;
  if(i&lt;2){
    lastcreated.text = btn_labels[i];
    lastcreated.empty = false;
    lastcreated.sprite_index = spr_btn_96x32;
    lastcreated.border_sprite = spr_selection_96x32;
    lastcreated.depth = depth-2;
  }else{
    lastcreated.empty = true;
    lastcreated.border_sprite = spr_selection_96x32;
    lastcreated.depth = depth-2;
    lastcreated.sprite_index = noone;
  }
}


hovered = btn_array[1,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
hover_border.depth = depth-3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff
draw_self();

//draw points remaining
draw_text(textbox_1.x,textbox_1.y,"Skill Points Remaining: " + string(skl_pts));

//draw skill icons
for(i=0;i&lt;slot_count;i+=1){
  crnt_btn = btn_array[i mod (width-1),i div (width-1)];
  if(!crnt_btn.empty){
    draw_sprite(crnt_btn.icon,crnt_btn.skl_lvl,crnt_btn.x,crnt_btn.y);
    if(skl_lvl[crnt_btn.skl_id] &lt; crnt_btn.skl_lvl){
      draw_sprite(spr_iconmask,0,crnt_btn.x,crnt_btn.y);//if not acquired, draw darkened
      with ds_list_find_value(skill_list,crnt_btn.skl_id){event_user(0)};
      if(!ds_list_find_value(skill_list,crnt_btn.skl_id).available[crnt_btn.skl_lvl]){//if !prerequisites met, draw lock
        draw_sprite(spr_iconlock,0,crnt_btn.x,crnt_btn.y);
      }
    }
  }
}

//draw name and descriptions
if(hovered.btn_column&lt;width-1 &amp;&amp; !hovered.empty){
  var crnt_skill;
  crnt_skill = ds_list_find_value(skill_list,hovered.skl_id);
  draw_text(textbox_2.x,textbox_2.y,crnt_skill.upgrade_name[hovered.skl_lvl]);
  draw_text(textbox_2.x,textbox_2.y+32,"Point Cost: " + string(crnt_skill.cost[hovered.skl_lvl]));
  draw_text_ext(textbox_2.x,textbox_2.y+64,"Prerequisites: " + crnt_skill.prerequisites[hovered.skl_lvl],10,256);
  draw_text_ext(textbox_2.x,textbox_2.y+128,crnt_skill.description[hovered.skl_lvl],10,256);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
