<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retrieve Character Headers
error_returned = false;
header_count = 0;
i = 0;
if (directory_exists(working_directory+"profiles")){
  header_file = file_find_first(working_directory + "headers\*.txt",0);
  if (header_file != ""){
    crnt_file = file_text_open_read(working_directory + "headers\"+header_file);
    loadname[0] = file_text_read_string(crnt_file);
    file_text_readln(crnt_file);
    loadsprite[0] = file_text_read_real(crnt_file);
    file_text_open_read(crnt_file);
    loadrank[0] = file_text_read_string(crnt_file);
    //file_text_readln(crnt_file);
    //loadgold[0] = file_text_read_real(crnt_file);
    file_text_close(crnt_file);
    i = 1;
    while (true){
      header_file = file_find_next();
      if (header_file != ""){
        crnt_file = file_text_open_read(header_file);
        if(crnt_file == -1){exit;}
        loadname[i] = file_text_read_string(crnt_file);
        file_text_readln(crnt_file);
        loadsprite[i] = file_text_read_real(crnt_file);
        file_text_open_read(crnt_file);
        loadrank[i] = file_text_read_string(crnt_file);
        //file_text_readln(crnt_file);
        //loadgold[i] = file_text_read_real(crnt_file);
        file_text_close(crnt_file);
        i += 1;
      }else{
        file_find_close();
        header_count = i;
        break;
      }
    }
  }else{
    show_message_menu('There are no saved characters, returning to character menu...');
    return_from = 1;
    error_returned = true;
  }
}else{
  show_message_menu("There are no saved characters, returning to character menu! working directory: " + working_directory);
  return_from = 1;
  error_returned = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Menu
if(error_returned){
  exit;
}
active = true;

btn_labels[0] = "A/R: Load";
btn_labels[1] = "B/E: Cancel";

//create submenus
active_submenu = id;

main = create_submenu(384,128,1,2,spr_btn_96x32,spr_selection_96x32,96,32,0,0,false);
for(i=0;i&lt;main.h;i+=1){
  main.btn[0,i].text = btn_labels[i];
}

load_slots = create_submenu(128,128,1,5,spr_gameslot,spr_selection_96x32,128,96,0,0,true);

var temp;
for(i=0;i&lt;load_slots.h;i+=1){
  temp = load_slots.btn[0,i];
  load_slots.btn[0,i] = instance_create(temp.x,temp.y,obj_loadslot);
  with(temp){instance_destroy();}
  load_slots.btn[0,i].border_sprite = spr_selection_96x96;
  load_slots.btn[0,i].row = i;
  load_slots.btn[0,i].column = 0;
  load_slots.btn[0,i].btn_index = i;
}
load_slots.hovered = load_slots.btn[0,0];
event_user(14);

active_submenu = load_slots;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press button/select
if(!active){
  exit;
}
if(confirm_btn){
  event_user(0);
  io_clear2();
}
if(cancel_btn){
  event_user(1);
  io_clear2();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Popup Window Results
switch(return_from){
case 0:
  
  break;
case 1:
  room_goto(room_charactermain);
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///refresh/create slots
var temp;

for(i=0;i&lt;load_slots.h;i+=1){
  if(i+load_slots.line_index &lt; header_count){
    load_slots.btn[0,i].loadsprite = loadsprite[i+load_slots.line_index];
    load_slots.btn[0,i].loadname = loadname[i+load_slots.line_index];
    load_slots.btn[0,i].loadrank = loadrank[i+load_slots.line_index];
    load_slots.btn[0,i].load_index = (i+load_slots.line_index);
    load_slots.btn[0,i].empty = false;
  }else{
    load_slots.btn[0,i].empty = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press cancel
if (global.roomprevious != room_mainmenu){
  room_goto(room_charactermain);
}else{
  room_goto(room_mainmenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press enter
if(active){
  //load
  if (load_game(string(load_slots.hovered.loadname)+'.txt') == 1){
    switch(global.roomprevious){
    case (room_mainmenu):
      //start the game
      start_game();
      break;
    case (room_charactermain):
      room_goto(room_charactermain)
      break;
    case (room_lobby):
      if (global.master){//master load
        ready[crnt_pnum] = true;
        clearbuffer();
        writebyte(MLOBBY_ID);
        writeint(cjp);
        for(i=0;i&lt;cjp;i+=1){
          writeint(pnum[i]);
          writeint(pslot[i]);
          writebyte(ready[i]);
          writestring(pname[i]);
          writebyte(mu_spr[i]);
          writebyte(mu_icon[i]);
          writeint(mu_mhp[i]);
          writeint(mu_mep[i]);
        }
        slave_sendall();
        room_goto(room_lobby);
      }else{//slave load
        ready[crnt_pnum] = true;
        clearbuffer();
        writebyte(SLAVE_INFO);
        writebyte(crnt_pnum);
        writeint(pslot[crnt_pnum]);
        writebyte(ready[crnt_pnum]);
        writestring(pname[crnt_pnum]);
        writebyte(mu_spr[crnt_pnum]);
        writebyte(mu_icon[crnt_pnum]);
        writeint(mu_mhp[crnt_pnum]);
        writeint(mu_mep[crnt_pnum]);
        sendmessage(server);
        room_goto(room_lobby);
      }
      break;
    case(room_arenamenu):
      room_goto(room_arenamenu);
    }
  }else{
    show_message_menu("file not found");
    return_from = 0;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
