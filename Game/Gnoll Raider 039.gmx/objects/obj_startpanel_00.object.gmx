<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menupanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up
for(i=0;i&lt;btn_count;i+=1){
  with(btn_array[i mod width, i div width]){
    instance_destroy();
  }
}

with (hover_border){
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (hovered.btn_index){
case 0:
  root.crnt_panel = instance_create(x,y,obj_startpanel_01);
  root.crnt_panel.root = root;
  with (root.crnt_panel){
    event_user(0);
  }
  instance_destroy();
  break;
    
case 1:
  root.crnt_panel = instance_create(x,y,obj_startpanel_02);
  root.crnt_panel.root = root;
  with (root.crnt_panel){
    event_user(0);
  }
  instance_destroy();
  break;

case 2:
  root.crnt_panel = instance_create(x,y,obj_startpanel_03);
  root.crnt_panel.root = root;
  with (root.crnt_panel){
    event_user(0);
  }
  instance_destroy();
  break;
    
case 3:
  
  break;
    
case 4:
 
  break;
    
case 5:
 
  break;
    
case 6:
  with(root){
    instance_destroy();
  }
  instance_destroy();
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables

width = 1;
height = 7;
btn_count = 7;

for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}

btn_labels[0] = "Status";
btn_labels[1] = "Inventory";
btn_labels[2] = "Journal";
btn_labels[3] = "Skills &amp; Traits";
btn_labels[4] = "Abilities";
btn_labels[5] = "Party";
btn_labels[6] = "Exit";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Buttons
width = 1;
height = 7;
btn_count = 7;

for(i=0;i&lt;btn_count;i+=1){
  lastcreated = instance_create(x+432,y+192+i*32,obj_btn);
  lastcreated.text = btn_labels[i];
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.btn_column = i mod width;
  lastcreated.btn_row = i div width;
  lastcreated.btn_index = i;
  btn_array[i mod width, i div width] = lastcreated;
}

hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_speed = 0;
hover_border.image_index = 0;

io_clear2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Start Panel 00
//draw buttons
draw_set_color(c_white)
draw_set_font(font0)



//draw stats

draw_text(x+34*SV,y+68*SV,'Weapon: ' + wpnname[crnt_wpn])
//draw_text(x+34*SV,y+82*SV,'Armor: ' + armrname[mu_armr[crnt_pnum]])
draw_text(x+34*SV,y+96*SV,'HP: ' + string(mu_hp[crnt_pnum]) + '/' + string(mu_mhp[crnt_pnum]))
draw_text(x+34*SV,y+110*SV,'EP: ' + string(mu_ep[crnt_pnum]) + '/' + string(mu_mep[crnt_pnum]))
if atkmod == 0
{
draw_text(x+34*SV,y+124*SV,'Attack: ' + string(crnt_atk))
}
else
{
if atkmod &gt; 0
{
draw_text(x+34*SV,y+124*SV,'Attack: ' + string(crnt_atk) + '+' + string(atkmod))
}
else
{
draw_text(x+34*SV,y+124*SV,'Attack: ' + string(crnt_atk) + string(atkmod))
}
}
if atkspdmod == 0
{
draw_text(x+34*SV,y+138*SV,'Attack Speed: ' + string(crnt_atkspd))
}
else
{
if atkspdmod &gt; 0
{
draw_text(x+34*SV,y+138*SV,'Attack Speed: ' + string(crnt_atkspd) + '+' + string(atkspdmod))
}
else
{
draw_text(x+34*SV,y+138*SV,'Attack Speed: ' + string(crnt_atkspd) + string(atkspdmod))
}
}
if rngmod == 0
{
draw_text(x+34*SV,y+152*SV,'Range: ' + string(crnt_rng))
}
else
{
if rngmod &gt; 0
{
draw_text(x+34*SV,y+152*SV,'Range: ' + string(crnt_rng) + '+' + string(rngmod))
}
else
{
draw_text(x+34*SV,y+152*SV,'Range: ' + string(crnt_rng) + string(rngmod))
}
}
if defmod == 0
{
draw_text(x+34*SV,y+166*SV,'Defense: ' + string(crnt_def))
}
else
{
if defmod &gt; 0
{
draw_text(x+34*SV,y+166*SV,'Defense: ' + string(crnt_def) + '+' + string(defmod))
}
else
{
draw_text(x+34*SV,y+166*SV,'Defense: ' + string(crnt_def) + string(defmod))
}
}
if spdmod == 0
{
draw_text(x+34*SV,y+180*SV,'Movement: ' + string(crnt_spd))
}
else
{
if spdmod &gt; 0
{
draw_text(x+34*SV,y+180*SV,'Movement: ' + string(crnt_spd) + '+' + string(spdmod))
}
else
{
draw_text(x+34*SV,y+180*SV,'Movement: ' + string(crnt_spd) + string(spdmod))
}
}

//maybe draw gold &amp; exp at bottom?
draw_text(x+34*SV,y+192*SV,'')
draw_text(x+34*SV,y+206*SV,'')
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
