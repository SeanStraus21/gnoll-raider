<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_ally_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
npcid = npc_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare Dialogue Variables
npc_dialogue[0] = "What is it bub?";
npc_dialogue[1] = "You got some kind of problem, rookie?";
npc_dialogue[2] = "What have you got for me?";
npc_dialogue[3] = "What is it now?";
npc_dialogue[4] = "Well look what the cat dragged in...";
npc_dialogue[5] = "Well beat it, I've got better things to do than shoot the crap with the likes of you.";
npc_dialogue[6] = "Shut up.";
npc_dialogue[7] = "I don't remember asking for your opinion, fatty.";
npc_dialogue[8] = "Did you get hit on the head recently or have you always been retarded? Oh, right...";
npc_dialogue[9] = "Get out of my sight.";
npc_dialogue[10] = "I'll thank you to keep your lame advice to yourself";
npc_dialogue[11] = "Hey, rookie, go stick your fat face in someone else's business, hey?";
npc_dialogue[12] = "Look, when I want a really stupid opinion, I'll ask for one.";
npc_dialogue[13] = "...";
npc_dialogue[14] = "...There's something wrong with you.";
npc_dialogue[15] = "Great, spit it out.";
npc_dialogue[16] = "Look, I'm sorry you suck and all, but there's nothing I can do.";
npc_dialogue[17] = "You suck. Just putting that out there."
npc_dialogue[18] = "Me giving a crap about your opinion is a privilege which is currently denied to you.";


pc_dialogue[0] = "Just checking in, boss.";
pc_dialogue[1] = "Just stopped by to say hello.";
pc_dialogue[2] = "Excuse me sir, but could I have a word with you?";
pc_dialogue[3] = "Sir, I have a report to make.";
pc_dialogue[4] = "";
pc_dialogue[5] = "";
pc_dialogue[6] = "";
pc_dialogue[7] = "";
pc_dialogue[8] = "";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables
npc_name = "Ragsheer"
conversing = false;
talking = false;

dlg_log = ds_list_create();
dlg_opts = ds_list_create();
dlg_opt_ids = ds_list_create();
hitpoints = 5;
spd = 3;
dir = 270;
npcdef = 1;
npcdefmod = 0;
knockable = true;
snared = false;
stunned = false;
stealthed = false;

//graphics
spr_ind = 1;
portrait = spr_npcportrait_ragsheer;
portrait_emotion = 0;
frame_num = 2;
portrait_ind = 2;
icon = spr_brgnoll_icon;
image_speed = 0;

//conversation
dlg_over = false;
talk_i = 0;
talk_j = 0;
talk_spd = 2;
talk_char = '';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up dialogue
end_dialogue(id,dlg_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprite stuff

if xprevious != x &amp;&amp; yprevious != y // if moving, have sprite move, else stop
    {
    if image_speed == 0
        {
        image_index += 1;
        image_speed = 0.25;
        }
    dir = point_direction(xprevious,yprevious,x,y)
    }
else
    {
    image_speed = 0;
    }
//align sprite to direction
switch ((dir+22.5) div 45)
    {
    case 0:
        sprite_index = sprEE[spr_ind];
        break;
        
    case 1:
        sprite_index = sprNE[spr_ind];
        break;
        
    case 2:
        sprite_index = sprNN[spr_ind];
        break;
        
    case 3:
        sprite_index = sprNW[spr_ind];
        break;
        
    case 4:
        sprite_index = sprWW[spr_ind];
        break;
        
    case 5:
        sprite_index = sprSW[spr_ind];
        break;
        
    case 6:
        sprite_index = sprSS[spr_ind];
        break;
        
    case 7:
        sprite_index = sprSE[spr_ind];
        break;
        
    case 8:
        sprite_index = sprEE[spr_ind];
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Conversation

//look at speaker
dir = point_direction(x,y,ds_list_find_value(dlg_menu.participants,0).x,ds_list_find_value(dlg_menu.participants,0).y);

//determine opening phrase
ds_list_copy(dlg_log,dialogue_log_append(npc_dialogue[0]));
log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
//determine starting options
ds_list_clear(dlg_opts);
ds_list_add(dlg_opts,pc_dialogue[0]);
ds_list_add(dlg_opts,pc_dialogue[1]);
ds_list_add(dlg_opts,pc_dialogue[2]);
//assign retrieval keys
ds_list_clear(dlg_opt_ids);
ds_list_add(dlg_opt_ids,0);
ds_list_add(dlg_opt_ids,1);
ds_list_add(dlg_opt_ids,2);

talking = true;
talk_spd = 2;
ds_list_clear(dlg_menu.display_log);
ds_list_add(dlg_menu.display_log,"");
alarm[1] = talk_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialogue Click
//Check if this NPC is in a conversation
if conversing == true
    {
    if (dlg_menu.position_x == 0) &amp;&amp; (talking == false) &amp;&amp; !(dlg_over)
        {
        talking = true;
        ds_list_clear(dlg_menu.display_log);
        ds_list_add(dlg_menu.display_log,"");
        dlg_menu.log_ind = 0;
        dlg_menu.log_page = 1;
        switch(ds_list_find_value(dlg_opt_ids,dlg_menu.hovered.key))
            {
            case 0:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[1]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 1:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[2]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 2:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[3]);
                //end dialogue
                ds_list_clear(dlg_opts);
                talking = true;
                dlg_over = true;
                break;
            
            case 3:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[4]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[4]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,4);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 4:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[5]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[3]);
                ds_list_add(dlg_opts,pc_dialogue[5]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,3);
                ds_list_add(dlg_opt_ids,5);
                ds_list_add(dlg_opt_ids,2);
                break;
            
            case 5:
                //respond
                dlg_log = dialogue_log_append(npc_dialogue[0]);
                //determine new options
                ds_list_clear(dlg_opts);
                ds_list_add(dlg_opts,pc_dialogue[0]);
                ds_list_add(dlg_opts,pc_dialogue[1]);
                ds_list_add(dlg_opts,pc_dialogue[2]);
                ds_list_clear(dlg_opt_ids);
                ds_list_add(dlg_opt_ids,0);
                ds_list_add(dlg_opt_ids,1);
                ds_list_add(dlg_opt_ids,2);
                break;
            }
        log_pcount = (ds_list_size(dlg_log) div dlg_menu.logwin_lnum) + ((ds_list_size(dlg_log) mod dlg_menu.logwin_lnum) &gt;0);
        alarm[1] = talk_spd;
        with dlg_menu
            {
            ds_list_clear(option_objects);
            with obj_menu_dlg_option
                {
                instance_destroy();
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
