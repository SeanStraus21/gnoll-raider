<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_menupanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up
for(i=0;i&lt;btn_count;i+=1){
  with(btn_array[i mod width, i div width]){
    instance_destroy();
  }
}

with (hover_border){
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (hovered.btn_row){
case 0:
  switch (hovered.btn_column){
  case 0:
    break;
      
  case 1:
    break;
  }
  break;
        
case 1:
  switch (hovered.btn_column){
  case 0:
    break;
          
  case 1:
    root.crnt_panel = instance_create(x,y,obj_startpanel_00);
    root.crnt_panel.root = root;
    with (root.crnt_panel){
      event_user(0);
    }
    instance_destroy();
    break;
  }
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set variables

btn_count = 4;
width = 2;
height = 2;

for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}

btn_labels[0] = "Weapon";
btn_labels[1] = "Armor";
btn_labels[2] = "Other";
btn_labels[3] = "Back";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Buttons

for(i=0;i&lt;btn_count;i+=1){
  lastcreated = instance_create(x+336+96*(i mod width),y+192+32*(i div width),obj_btn);
  lastcreated.text = btn_labels[i];
  lastcreated.sprite_index = spr_btn_96x32;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.btn_column = i mod width;
  lastcreated.btn_row = i div width;
  lastcreated.btn_index = i;
  btn_array[i mod width, i div width] = lastcreated;
}

hovered = btn_array[0,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_speed = 0;
hover_border.image_index = 0;

io_clear2();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Start Panel 01(Status)

//draw full portrait
draw_sprite(spr_border_48x64,0,x+144,y+80)
//draw_sprite(sprfullbody[mu_spr[crnt_pnum]],0,x+144,y+80)
//draw_sprite(sprfullhead[mu_spr[crnt_pnum]],0,x+160,y+80)
//draw_sprite(wpnfullspr[crnt_wpn],0,x+144,y+80)

//draw stats
draw_text(x+34,y+68,'Weapon: ' + wpnname[crnt_wpn])
//draw_text(x+34,y+82,'Armor: ' + armrname[crnt_armr])
draw_text(x+34,y+96,'HP: ' + string(mu_hp[crnt_pnum]) + '/' + string(mu_mhp[crnt_pnum]))
draw_text(x+34,y+110,'EP: ' + string(mu_ep[crnt_pnum]) + '/' + string(mu_mep[crnt_pnum]))
if atkmod == 0
{
draw_text(x+34,y+124,'Attack: ' + string(crnt_atk))
}
else
{
if atkmod &gt; 0
{
draw_text(x+34,y+124,'Attack: ' + string(crnt_atk) + '+' + string(atkmod))
}
else
{
draw_text(x+34,y+124,'Attack: ' + string(crnt_atk) + string(atkmod))
}
}
if atkspdmod == 0
{
draw_text(x+34,y+138,'Attack Speed: ' + string(crnt_atkspd))
}
else
{
if atkspdmod &gt; 0
{
draw_text(x+34,y+138,'Attack Speed: ' + string(crnt_atkspd) + '+' + string(atkspdmod))
}
else
{
draw_text(x+34,y+138,'Attack Speed: ' + string(crnt_atkspd) + string(atkspdmod))
}
}
if rngmod == 0
{
draw_text(x+34,y+152,'Range: ' + string(crnt_rng))
}
else
{
if rngmod &gt; 0
{
draw_text(x+34,y+152,'Range: ' + string(crnt_rng) + '+' + string(rngmod))
}
else
{
draw_text(x+34,y+152,'Range: ' + string(crnt_rng) + string(rngmod))
}
}
if defmod == 0
{
draw_text(x+34,y+166,'Defense: ' + string(crnt_def))
}
else
{
if defmod &gt; 0
{
draw_text(x+34,y+166,'Defense: ' + string(crnt_def) + '+' + string(defmod))
}
else
{
draw_text(x+34,y+166,'Defense: ' + string(crnt_def) + string(defmod))
}
}
if spdmod == 0
{
draw_text(x+34,y+180,'Movement: ' + string(crnt_spd))
}
else
{
if spdmod &gt; 0
{
draw_text(x+34,y+180,'Movement: ' + string(crnt_spd) + '+' + string(spdmod))
}
else
{
draw_text(x+34,y+180,'Movement: ' + string(crnt_spd) + string(spdmod))
}
}

//maybe draw gold &amp; exp at bottom?
draw_text(x+34,y+192,'')
draw_text(x+34,y+206,'')
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
