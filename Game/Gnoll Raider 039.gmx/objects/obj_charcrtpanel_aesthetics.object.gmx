<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_charcrtpanel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>7</depth>
  <persistent>0</persistent>
  <parentName>obj_charcrtpanel_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean Up

with (hover_border){
  instance_destroy();
}

for(i=0;i&lt;3;i+=1){
  with(btn_array[0, i]){
    instance_destroy();
  }
}
for(i=0;i&lt;width;i+=1){
  with(btn_array[i, 3]){
    instance_destroy();
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Keyboard Input
if(!active){
  exit;
}
//press enter
if(confirm_btn){
  event_user(1);
  io_clear2();
}else{
  //set buttons to look pressed if proper keyboard input is given
  for(i=0;i&lt;3;i+=1){
    if(hovered != btn_array[0, i]){
      btn_array[0, i].image_index = 0;
    }else{
      if(arrow_left){
        btn_array[0, i].image_index = 1;
      }else if(arrow_right){
        btn_array[0, i].image_index = 2;
      }else{
         btn_array[0, i].image_index = 0;
      }
    }
  }
  ///Toggle or Move Left
  if(arrow_left){
    if(hovered.btn_row &lt; 3){//toggle
      switch (hovered.btn_row){
      case 0://portrait
        if (icon_index &gt; 0){
          icon_index -= 1;
        }else{
          icon_index = icon_count - 1;
        }
        break;
      case 1://color
        if (color_index &gt; 0){
          color_index -= 1;
        }else{
          color_index = color_count - 1;
        }
        break;
      case 2:
        gender = !gender;
        break;
      }
    }else{//move left
      if (hovered.btn_column &gt; 0){
        hovered = btn_array[hovered.btn_column - 1,hovered.btn_row];
      }else{
        hovered = btn_array[row_width[hovered.btn_column]-1,hovered.btn_row];
      }
      hover_border.sprite_index = hovered.border_sprite;
      hover_border.x = hovered.x;
      hover_border.y = hovered.y;
    }
  }
  ///Toggle or Move Right
  if(arrow_right){//toggle
    if(hovered.btn_row &lt; 3){
      switch (hovered.btn_row){
      case 0://portrait
        icon_index = (icon_index + 1)mod icon_count;
        break;
      case 1://color
        color_index = (color_index + 1)mod color_count;
        break;
      case 2:
        gender = !gender;
        break;
      }
    }else{//move right
      var checked;
      //for dealing with objects that take up multiple slots //while hovered is the same as the next thing
      checked = btn_array[(hovered.btn_column + 1) mod (row_width[hovered.btn_row]),hovered.btn_row];
      for(i=2; i&lt;row_width[hovered.btn_row] &amp;&amp; hovered == checked;i+=1){
        checked = btn_array[(hovered.btn_column + i) mod (row_width[hovered.btn_row]),hovered.btn_row];
      }
      hovered = checked;
      hover_border.sprite_index = hovered.border_sprite;
      hover_border.x = hovered.x;
      hover_border.y = hovered.y;
    }
  }
  
  //move up
  if(arrow_up){
    if (hovered.btn_row &gt; 0){
      hovered = btn_array[hovered.btn_column,hovered.btn_row - 1];
    }else{
      hovered = btn_array[hovered.btn_column,column_height[hovered.btn_column] - 1];
    }
    hover_border.sprite_index = hovered.border_sprite;
    hover_border.x = hovered.x;
    hover_border.y = hovered.y;
  }
  
  //move down
  if(arrow_down){
    if (hovered.btn_row &lt; column_height[hovered.btn_column]-1){
      hovered = btn_array[hovered.btn_column,hovered.btn_row + 1];
    }else{
      hovered = btn_array[hovered.btn_column,0];
    }
    hover_border.sprite_index = hovered.border_sprite;
    hover_border.x = hovered.x;
    hover_border.y = hovered.y;
  }
  
  if(arrow_right || arrow_left || arrow_down || arrow_up){
    io_clear2();
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Press Button

switch(hovered.btn_index){
  case 3://back to main without confirmation
    with(root){
      event_user(3);
    }
    root.active = true;
    instance_destroy();
    break;
  case 4://confirm choices and go to the next step
    root.charcrt_icon = icon_index;
    root.charcrt_sprite = color_index+root.charcrt_class*color_count;//+(gender*class_count*color_count)
    //etc.
    root.crnt_step += 1;
    root.active = true;
    with(root){
      event_user(3);
    }
    instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Constants

//Dimensions
btn_count = 5;
width = 2;
height = 4;

for(i=0;i&lt;width;i+=1){
  column_height[i] = height;
}
for(i=0;i&lt;height;i+=1){
  row_width[i] = width;
}

btn_labels[0] = "Portrait";
btn_labels[1] = "Color";
btn_labels[2] = "";//"Gender";
btn_labels[3] = "Cancel";
btn_labels[4] = "Done";


//Defaults
color_count = 3;
icon_count = 4;

color_index = 0;
icon_index = 0;
gender = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Menu
color = root.charcrt_sprite
icon = root.charcrt_icon

//create buttons
for(i=0;i&lt;3;i+=1){
  lastcreated = instance_create(x+384,y+128+i*32,obj_btn);
  lastcreated.sprite_index = spr_arrowbtn_96x32;
  lastcreated.image_speed = 0;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.depth = depth-1;
  lastcreated.text = btn_labels[i];
  lastcreated.btn_column = 1;
  lastcreated.btn_row = i
  lastcreated.btn_index = i;
  
  btn_array[0, i] = lastcreated;
  btn_array[1, i] = lastcreated;
}
for(i=0;i&lt;width;i+=1){
  lastcreated = instance_create(x+336+96*i,y+128+3*32,obj_btn);
  lastcreated.text = btn_labels[3+i];
  lastcreated.btn_column = i;
  lastcreated.btn_row = 3
  lastcreated.btn_index = 3+i;
  lastcreated.border_sprite = spr_selection_96x32;
  lastcreated.depth = depth-1;
  btn_array[i, 3] = lastcreated;
}

hovered = btn_array[1,0];
hover_border = instance_create(hovered.x,hovered.y,obj_selection);
hover_border.sprite_index = hovered.border_sprite;
hover_border.image_index = 0;
hover_border.image_speed = 0;
hover_border.depth = depth-2;

io_clear2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu
draw_self();

//Draw Boxes
draw_sprite(spr_border_96x96,0,x+128,y+64);
draw_sprite(spr_spriteborder,0,x+128,y+256);
//draw_sprite(spr_border_48x64,0,x+56,y+64);

//Draw Previews
draw_sprite(spriconlg[color_index],icon_index,x+128,y+64);
draw_sprite(sprSE[color_index+root.charcrt_class*color_count],0,x+128,y+256);

//draw_sprite(sprfullbody[sprite+0],root.charcrt_armor,x+56,y+64);
//draw_sprite(sprfullhead[sprite+0],icon,x+72,y+64);
//draw_sprite(wpnfullspr[root.charcrt_weapon],0,x+56,y+64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
